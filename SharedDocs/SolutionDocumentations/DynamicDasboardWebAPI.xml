<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DynamicDasboardWebAPI</name>
    </assembly>
    <members>
        <member name="T:DynamicDasboardWebAPI.Configurations.AppSettings">
            <summary>
            Configuration settings for different database connections.
            </summary>
        </member>
        <member name="P:DynamicDasboardWebAPI.Configurations.AppSettings.SQLServerWindowsAuth">
            <summary>
            Gets or sets the connection string for SQL Server using Windows Authentication.
            </summary>
        </member>
        <member name="P:DynamicDasboardWebAPI.Configurations.AppSettings.MySQL">
            <summary>
            Gets or sets the connection string for MySQL database.
            </summary>
        </member>
        <member name="P:DynamicDasboardWebAPI.Configurations.AppSettings.Oracle">
            <summary>
            Gets or sets the connection string for Oracle database.
            </summary>
        </member>
        <member name="T:DynamicDasboardWebAPI.Configurations.DatabaseConfig">
            <summary>
            Represents the configuration settings for the database connection.
            This class is used to store and manage database-related configuration
            settings such as connection strings, database provider, and other
            relevant options.
            </summary>
        </member>
        <member name="T:DynamicDasboardWebAPI.Controllers.ColumnsController">
            <summary>
            API Controller for managing columns in the dynamic dashboard.
            Provides endpoints to get, add, update, and delete columns.
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Controllers.ColumnsController.#ctor(DynamicDasboardWebAPI.Services.ColumnService)">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicDasboardWebAPI.Controllers.ColumnsController"/> class.
            </summary>
            <param name="service">The column service to handle business logic.</param>
        </member>
        <member name="M:DynamicDasboardWebAPI.Controllers.ColumnsController.GetColumnsByTableId(System.Int32)">
            <summary>
            Gets the columns for a specific table.
            </summary>
            <param name="tableId">The ID of the table.</param>
            <returns>A list of columns for the specified table.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Controllers.ColumnsController.AddColumn(DynamicDashboardCommon.Models.Column)">
            <summary>
            Adds a new column.
            </summary>
            <param name="column">The column to add.</param>
            <returns>The ID of the newly added column.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Controllers.ColumnsController.UpdateColumn(System.Int32,DynamicDashboardCommon.Models.Column)">
            <summary>
            Updates an existing column.
            </summary>
            <param name="columnId">The ID of the column to update.</param>
            <param name="column">The updated column data.</param>
            <returns>The ID of the updated column.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Controllers.ColumnsController.DeleteColumn(System.Int32)">
            <summary>
            Deletes a column.
            </summary>
            <param name="columnId">The ID of the column to delete.</param>
            <returns>The ID of the deleted column.</returns>
        </member>
        <member name="T:DynamicDasboardWebAPI.Controllers.EnhancedNlQueryController">
            <summary>
            Enhanced controller for processing natural language queries with a multi-step workflow:
            1. Analyze question and provide explanation
            2. Generate SQL from confirmed understanding
            3. Execute query and return results
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Controllers.EnhancedNlQueryController.#ctor(DynamicDasboardWebAPI.Services.EnhancedNlQueryService,Microsoft.Extensions.Logging.ILogger{DynamicDasboardWebAPI.Controllers.EnhancedNlQueryController})">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicDasboardWebAPI.Controllers.EnhancedNlQueryController"/> class.
            </summary>
            <param name="nlQueryService">The natural language query service.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:DynamicDasboardWebAPI.Controllers.EnhancedNlQueryController.AnalyzeQuestion(DynamicDashboardCommon.Models.NlQueryRequest)">
            <summary>
            Step 1: Analyzes a natural language question and returns an explanation.
            </summary>
            <param name="request">The natural language query request.</param>
            <returns>An explanation of how the system understands the question.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Controllers.EnhancedNlQueryController.GenerateSql(DynamicDashboardCommon.Models.DynamicDashboardCommon.Models.NlQueryConfirmationRequest)">
            <summary>
            Step 2: Generates SQL from a confirmed understanding.
            </summary>
            <param name="request">The confirmation request with resolved ambiguities.</param>
            <returns>The generated SQL query.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Controllers.EnhancedNlQueryController.ExecuteQuery(DynamicDashboardCommon.Models.DynamicDashboardCommon.Models.SqlExecutionRequest)">
            <summary>
            Step 3: Executes a SQL query and returns the results.
            </summary>
            <param name="request">The execution request with the SQL query.</param>
            <returns>The query results with explanation.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Controllers.EnhancedNlQueryController.ProcessQuery(DynamicDashboardCommon.Models.NlQueryRequest)">
            <summary>
            Unified endpoint for backward compatibility: processes a natural language query in one step.
            </summary>
            <param name="request">The natural language query request.</param>
            <returns>The query response including SQL and results.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Controllers.EnhancedNlQueryController.GetExampleQuestions(System.Int32)">
            <summary>
            Gets example questions for a specific database.
            </summary>
            <param name="databaseId">The database ID.</param>
            <returns>A list of example questions.</returns>
        </member>
        <member name="T:DynamicDasboardWebAPI.Controllers.QueryGeneratorController">
            <summary>
            API Controller for handling query generation and Excel file processing.
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Controllers.QueryGeneratorController.#ctor(DynamicDasboardWebAPI.Services.QueryGeneratorService)">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicDasboardWebAPI.Controllers.QueryGeneratorController"/> class.
            </summary>
            <param name="queryGeneratorService">The service for generating queries and processing Excel files.</param>
        </member>
        <member name="M:DynamicDasboardWebAPI.Controllers.QueryGeneratorController.GenerateQuery(DynamicDashboardCommon.Models.QueryRequest)">
            <summary>
            Generates a query based on the provided schema and question.
            </summary>
            <param name="request">The request containing the schema and question.</param>
            <returns>An IActionResult containing the generated query or an error message.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Controllers.QueryGeneratorController.ProcessExcel(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Processes an uploaded Excel file and returns a modified version.
            </summary>
            <param name="file">The uploaded Excel file.</param>
            <returns>An IActionResult containing the modified Excel file or an error message.</returns>
        </member>
        <member name="T:DynamicDasboardWebAPI.Controllers.RelationshipsController">
            <summary>
            API Controller for managing relationships between tables.
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Controllers.RelationshipsController.#ctor(DynamicDasboardWebAPI.Services.RelationshipService)">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicDasboardWebAPI.Controllers.RelationshipsController"/> class.
            </summary>
            <param name="service">The relationship service.</param>
        </member>
        <member name="M:DynamicDasboardWebAPI.Controllers.RelationshipsController.GetRelationshipsByTableId(System.Int32)">
            <summary>
            Gets the relationships for a specific table.
            </summary>
            <param name="tableId">The ID of the table.</param>
            <returns>A list of relationships for the specified table.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Controllers.RelationshipsController.AddRelationship(DynamicDashboardCommon.Models.Relationship)">
            <summary>
            Adds a new relationship.
            </summary>
            <param name="relationship">The relationship to add.</param>
            <returns>The ID of the newly created relationship.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Controllers.RelationshipsController.UpdateRelationship(System.Int32,DynamicDashboardCommon.Models.Relationship)">
            <summary>
            Updates an existing relationship.
            </summary>
            <param name="relationshipId">The ID of the relationship to update.</param>
            <param name="relationship">The updated relationship data.</param>
            <returns>The ID of the updated relationship.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Controllers.RelationshipsController.DeleteRelationship(System.Int32)">
            <summary>
            Deletes a relationship.
            </summary>
            <param name="relationshipId">The ID of the relationship to delete.</param>
            <returns>The ID of the deleted relationship.</returns>
        </member>
        <member name="T:DynamicDasboardWebAPI.Controllers.TablesController">
            <summary>
            API Controller for managing tables in the database.
            Provides endpoints to get, add, update, and delete tables.
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Controllers.TablesController.#ctor(DynamicDasboardWebAPI.Services.TableService)">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicDasboardWebAPI.Controllers.TablesController"/> class.
            </summary>
            <param name="service">The table service to interact with the data layer.</param>
        </member>
        <member name="M:DynamicDasboardWebAPI.Controllers.TablesController.GetTablesByDatabaseId(System.Int32)">
            <summary>
            Gets the list of tables for a specific database.
            </summary>
            <param name="databaseId">The ID of the database.</param>
            <returns>A list of tables in the specified database.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Controllers.TablesController.AddTable(DynamicDashboardCommon.Models.Table)">
            <summary>
            Adds a new table to the database.
            </summary>
            <param name="table">The table to add.</param>
            <returns>The ID of the newly created table.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Controllers.TablesController.UpdateTable(System.Int32,DynamicDashboardCommon.Models.Table)">
            <summary>
            Updates an existing table in the database.
            </summary>
            <param name="tableId">The ID of the table to update.</param>
            <param name="table">The updated table data.</param>
            <returns>The ID of the updated table.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Controllers.TablesController.DeleteTable(System.Int32)">
            <summary>
            Deletes a table from the database.
            </summary>
            <param name="tableId">The ID of the table to delete.</param>
            <returns>The ID of the deleted table.</returns>
        </member>
        <member name="T:DynamicDasboardWebAPI.Controllers.UsersController">
            <summary>
            API Controller for managing users.
            Provides endpoints to perform CRUD operations on users.
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Controllers.UsersController.#ctor(DynamicDasboardWebAPI.Services.IUserService)">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicDasboardWebAPI.Controllers.UsersController"/> class.
            </summary>
            <param name="userService">The user service to interact with user data.</param>
        </member>
        <member name="M:DynamicDasboardWebAPI.Controllers.UsersController.GetAllUsers">
            <summary>
            Gets all users.
            </summary>
            <returns>A list of users.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Controllers.UsersController.AddUser(DynamicDashboardCommon.Models.User)">
            <summary>
            Adds a new user.
            </summary>
            <param name="user">The user to add.</param>
            <returns>The created user.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Controllers.UsersController.GetUserByID(System.Int32)">
            <summary>
            Gets a user by ID.
            </summary>
            <param name="id">The ID of the user to retrieve.</param>
            <returns>The user with the specified ID.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Repositories.BatchProcessingRepository.LogBatchJobAsync(System.String,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Logs a batch processing job.
            </summary>
            <param name="fileName">The name of the processed file.</param>
            <param name="totalQuestions">The total number of questions processed.</param>
            <param name="successCount">The number of successfully processed questions.</param>
            <param name="userId">The user ID (optional).</param>
            <returns>The ID of the inserted log.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Repositories.BatchProcessingRepository.LogBatchDetailAsync(System.Int32,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Logs details for each question in a batch.
            </summary>
            <param name="batchId">The ID of the batch processing log.</param>
            <param name="question">The natural language question.</param>
            <param name="generatedSql">The generated SQL query.</param>
            <param name="success">Whether the processing was successful.</param>
            <param name="errorMessage">Error message if processing failed (optional).</param>
            <returns>The ID of the inserted log detail.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Repositories.BatchProcessingRepository.GetRecentBatchJobsAsync(System.Nullable{System.Int32},System.Int32)">
            <summary>
            Gets recent batch processing jobs.
            </summary>
            <param name="userId">The user ID (optional).</param>
            <param name="limit">Maximum number of jobs to return.</param>
            <returns>A list of recent batch processing jobs.</returns>
        </member>
        <member name="T:DynamicDasboardWebAPI.Repositories.GenericRepository`1">
            <summary>  
            A generic repository class that provides basic CRUD operations for entities.  
            This class can be used as a base class for specific entity repositories.  
            </summary>  
            <typeparam name="TEntity">The type of the entity.</typeparam>  
        </member>
        <member name="M:DynamicDasboardWebAPI.Repositories.GenericRepository`1.#ctor">
            <summary>  
            Initializes a new instance of the <see cref="T:DynamicDasboardWebAPI.Repositories.GenericRepository`1"/> class.  
            </summary>  
        </member>
        <member name="M:DynamicDasboardWebAPI.Repositories.GenericRepository`1.GetAll">
            <summary>  
            Gets all entities.  
            </summary>  
            <returns>A collection of all entities.</returns>  
        </member>
        <member name="M:DynamicDasboardWebAPI.Repositories.GenericRepository`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>  
            Finds entities based on a predicate.  
            </summary>  
            <param name="predicate">The predicate to filter entities.</param>  
            <returns>A collection of entities that match the predicate.</returns>  
        </member>
        <member name="M:DynamicDasboardWebAPI.Repositories.GenericRepository`1.Add(`0)">
            <summary>  
            Adds a new entity.  
            </summary>  
            <param name="entity">The entity to add.</param>  
        </member>
        <member name="M:DynamicDasboardWebAPI.Repositories.GenericRepository`1.Update(`0)">
            <summary>  
            Updates an existing entity.  
            </summary>  
            <param name="entity">The entity to update.</param>  
        </member>
        <member name="M:DynamicDasboardWebAPI.Repositories.GenericRepository`1.Delete(`0)">
            <summary>  
            Deletes an entity.  
            </summary>  
            <param name="entity">The entity to delete.</param>  
        </member>
        <member name="T:DynamicDasboardWebAPI.Repositories.IDatabaseRepository">
            <summary>
            Interface for database repository operations.
            Provides methods to interact with database entities and their metadata.
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Repositories.IDatabaseRepository.GetAllDatabasesAsync">
            <summary>
            Retrieves all databases asynchronously.
            </summary>
            <returns>A task that represents the asynchronous operation. The task result contains a collection of databases.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Repositories.IDatabaseRepository.AddDatabaseAsync(DynamicDashboardCommon.Models.Database)">
            <summary>
            Adds a new database asynchronously.
            </summary>
            <param name="database">The database entity to add.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the ID of the added database.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Repositories.IDatabaseRepository.GetDatabaseMetadataAsync(System.Int32)">
            <summary>
            Retrieves metadata for a specific database asynchronously.
            </summary>
            <param name="databaseId">The ID of the database.</param>
            <returns>A task that represents the asynchronous operation. The task result contains a collection of tables associated with the database.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Repositories.IDatabaseRepository.GetDatabaseByNameAsync(System.String)">
            <summary>
            Retrieves a database by its name asynchronously.
            </summary>
            <param name="databaseName">The name of the database.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the database entity.</returns>
        </member>
        <member name="T:DynamicDasboardWebAPI.Repositories.IUserRepository">
            <summary>
            Defines the contract for user repository operations.
            </summary>
        </member>
        <member name="T:DynamicDasboardWebAPI.Repositories.LogsRepository">
            <summary>
            Repository for logging events in the Logs table.
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Repositories.LogsRepository.#ctor(System.Data.IDbConnection,DbConnectionFactory,Microsoft.Extensions.Logging.ILogger{DatabaseRepository})">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicDasboardWebAPI.Repositories.LogsRepository"/> class.
            </summary>
            <param name="connection">Database connection instance.</param>
            <param name="logger">Optional logger for capturing repository operations.</param>
        </member>
        <member name="M:DynamicDasboardWebAPI.Repositories.LogsRepository.AddLogAsync(System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Inserts a new log entry into the Logs table.
            </summary>
            <param name="userId">The ID of the user (nullable).</param>
            <param name="eventType">The type of the event.</param>
            <param name="eventDescription">The description of the event.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Repositories.LogsRepository.GetRecentLogsAsync(System.Int32)">
            <summary>
            Gets recent log entries.
            </summary>
            <param name="limit">Maximum number of log entries to retrieve.</param>
            <returns>A collection of recent log entries.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Repositories.LogsRepository.GetLogsByEventTypeAsync(System.String,System.Int32)">
            <summary>
            Gets log entries by event type.
            </summary>
            <param name="eventType">Type of event to filter by.</param>
            <param name="limit">Maximum number of log entries to retrieve.</param>
            <returns>A collection of log entries of the specified type.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Repositories.LogsRepository.GetLogsByUserIdAsync(System.Int32,System.Int32)">
            <summary>
            Gets log entries for a specific user.
            </summary>
            <param name="userId">User ID to filter by.</param>
            <param name="limit">Maximum number of log entries to retrieve.</param>
            <returns>A collection of log entries for the specified user.</returns>
        </member>
        <member name="T:DynamicDasboardWebAPI.Repositories.QueryLogsRepository">
            <summary>
            Repository for logging executed queries into the QueryLogs table.
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Repositories.QueryLogsRepository.LogQueryAsync(System.String,System.Nullable{System.Int32},System.Int32,System.String)">
            <summary>
            Logs an executed query into the QueryLogs table.
            </summary>
            <param name="queryText">The SQL query executed.</param>
            <param name="executedBy">User ID of the executor (nullable).</param>
            <param name="databaseType">The type of database used.</param>
            <param name="result">Serialized result of the query (optional).</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Repositories.QueryLogsRepository.GetQueryHistoryAsync(System.Nullable{System.Int32},System.Int32)">
            <summary>
            Gets the history of executed queries.
            </summary>
            <param name="userId">Optional user ID to filter by.</param>
            <param name="limit">Number of records to retrieve.</param>
            <returns>List of query log entries.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Repositories.QueryLogsRepository.GetQueryByIdAsync(System.Int32)">
            <summary>
            Gets details of a specific query by ID.
            </summary>
            <param name="queryId">The ID of the query to retrieve.</param>
            <returns>The query details.</returns>
        </member>
        <member name="T:DynamicDasboardWebAPI.Repositories.QueryRepository">
            <summary>
            Repository for executing dynamic SQL queries.
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Repositories.QueryRepository.ExecuteQueryAsync(System.String)">
            <summary>
            Executes a dynamic SQL query using the default connection and returns the result.
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Repositories.QueryRepository.ExecuteQueryAsync(System.String,System.Int32)">
            <summary>
            Executes a dynamic SQL query on the specified database and returns the result.
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Repositories.QueryRepository.ExecuteQueryWithParamsAsync(System.String,System.Object)">
            <summary>
            Executes a dynamic SQL query with parameters and returns the result.
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Repositories.QueryRepository.ExecuteQueryWithParamsAsync(System.String,System.Int32,System.Object)">
            <summary>
            Executes a dynamic SQL query with parameters on the specified database.
            </summary>
        </member>
        <member name="T:DynamicDasboardWebAPI.Services.ColumnService">
            <summary>
            Service class for managing columns in the database.
            Provides methods to get, add, update, and delete columns.
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.ColumnService.#ctor(DynamicDasboardWebAPI.Repositories.ColumnRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicDasboardWebAPI.Services.ColumnService"/> class.
            </summary>
            <param name="repository">The repository to interact with the database.</param>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.ColumnService.GetColumnsByTableIdAsync(System.Int32)">
            <summary>
            Gets the columns for a specific table.
            </summary>
            <param name="tableId">The ID of the table.</param>
            <returns>A list of columns for the specified table.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.ColumnService.AddColumnAsync(DynamicDashboardCommon.Models.Column)">
            <summary>
            Adds a new column to the database.
            </summary>
            <param name="column">The column to add.</param>
            <returns>The ID of the newly added column.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the column name is null or whitespace.</exception>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.ColumnService.UpdateColumnAsync(DynamicDashboardCommon.Models.Column)">
            <summary>
            Updates an existing column in the database.
            </summary>
            <param name="column">The column to update.</param>
            <returns>The number of affected rows.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the column name is null or whitespace.</exception>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.ColumnService.DeleteColumnAsync(System.Int32)">
            <summary>
            Deletes a column from the database.
            </summary>
            <param name="columnId">The ID of the column to delete.</param>
            <returns>The number of affected rows.</returns>
        </member>
        <member name="T:DynamicDasboardWebAPI.Services.DatabaseService">
            <summary>
            Service for managing database operations including connections, metadata, and queries.
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.DatabaseService.#ctor(DatabaseRepository,DynamicDasboardWebAPI.Repositories.TableRepository,DynamicDasboardWebAPI.Repositories.ColumnRepository,DbConnectionFactory,Microsoft.Extensions.Logging.ILogger{DynamicDasboardWebAPI.Services.DatabaseService})">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicDasboardWebAPI.Services.DatabaseService"/> class.
            </summary>
            <param name="repository">The repository for database operations.</param>
            <param name="tableRepository">The repository for table operations.</param>
            <param name="columnRepository">The repository for column operations.</param>
            <param name="connectionFactory">The factory for creating database connections.</param>
            <param name="logger">The logger for service operations.</param>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.DatabaseService.GetAllDatabasesAsync">
            <summary>
            Retrieves all databases from the system.
            </summary>
            <returns>A collection of all databases.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.DatabaseService.AddDatabaseAsync(DynamicDashboardCommon.Models.Database)">
            <summary>
            Adds a new database to the system.
            </summary>
            <param name="database">The database to add.</param>
            <returns>The ID of the newly added database.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.DatabaseService.UpdateDatabaseAsync(DynamicDashboardCommon.Models.Database)">
            <summary>
            Updates an existing database in the system.
            </summary>
            <param name="database">The database to update.</param>
            <returns>The number of affected rows.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.DatabaseService.DeleteDatabaseAsync(System.Int32)">
            <summary>
            Deletes a database from the system.
            </summary>
            <param name="databaseId">The ID of the database to delete.</param>
            <returns>The number of affected rows.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.DatabaseService.TestConnectionAsync(DynamicDashboardCommon.Models.Database)">
            <summary>
            Tests a database connection using the provided connection details.
            </summary>
            <param name="database">The database connection to test.</param>
            <returns>True if the connection was successful; otherwise, false.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.DatabaseService.GetSupportedDatabaseTypesAsync">
            <summary>
            Gets a list of supported database types.
            </summary>
            <returns>A list of supported database types.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.DatabaseService.GetDatabaseMetadataAsync(System.Int32)">
            <summary>
            Gets database metadata for the specified database.
            </summary>
            <param name="databaseId">The ID of the database.</param>
            <returns>True if metadata was retrieved successfully; otherwise, false.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.DatabaseService.GetDatabaseByIdAsync(System.Int32)">
            <summary>
            Gets a database by ID.
            </summary>
            <param name="databaseId">The ID of the database to retrieve.</param>
            <returns>The database with the specified ID, or null if not found.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.DatabaseService.GetAllDatabaseTypesAsync">
            <summary>
            Gets all database types.
            </summary>
            <returns>A collection of database types.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.DatabaseService.GetDatabaseTypeNameAsync(System.Int32)">
            <summary>
            Gets the database type name for the specified ID.
            </summary>
            <param name="typeId">The type ID.</param>
            <returns>The database type name.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.DatabaseService.RetrieveDatabaseSchemaAsync(System.Int32)">
            <summary>
            Retrieves the database schema from a user's database.
            </summary>
            <param name="databaseId">The ID of the database.</param>
            <returns>A collection of tables and columns from the schema.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.DatabaseService.GetSavedSchemaAsync(System.Int32)">
            <summary>
            Retrieves schema information that has been saved in the application database.
            </summary>
            <param name="databaseId">The ID of the database.</param>
            <returns>A collection of tables and columns from the saved schema.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.DatabaseService.ConvertSchemaToDto(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Converts raw schema data to DTOs.
            </summary>
            <param name="schemaData">Raw schema data from the database.</param>
            <returns>A collection of table DTOs.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.DatabaseService.SaveDatabaseSchemaAsync(System.Int32,System.Collections.Generic.IEnumerable{DynamicDashboardCommon.Models.SchemaTableDto})">
            <summary>
            Saves database schema to the application database.
            </summary>
            <param name="databaseId">The ID of the database.</param>
            <param name="schema">The schema to save.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:DynamicDasboardWebAPI.Services.EnhancedNlQueryService">
            <summary>
            Enhanced service for processing natural language queries with a two-step confirmation process
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.EnhancedNlQueryService.AnalyzeQuestionAsync(DynamicDashboardCommon.Models.NlQueryRequest)">
            <summary>
            Step 1: Analyze a natural language question and generate an explanation
            </summary>
            <param name="request">The natural language query request</param>
            <returns>An explanation of how the system understands the question</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.EnhancedNlQueryService.GenerateSqlAsync(DynamicDashboardCommon.Models.DynamicDashboardCommon.Models.NlQueryConfirmationRequest)">
            <summary>
            Step 2: Generate SQL based on confirmed understanding
            </summary>
            <param name="request">The confirmation request with resolved ambiguities</param>
            <returns>Generated SQL query</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.EnhancedNlQueryService.ExecuteQueryAsync(DynamicDashboardCommon.Models.DynamicDashboardCommon.Models.SqlExecutionRequest)">
            <summary>
            Step 3: Execute the generated SQL and explain the results
            </summary>
            <param name="request">The execution request with the SQL query</param>
            <returns>Query results with explanation</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.EnhancedNlQueryService.ProcessNaturalLanguageQueryAsync(DynamicDashboardCommon.Models.NlQueryRequest)">
            <summary>
            Combined method for backward compatibility: Analyze, generate SQL, and execute in one step
            </summary>
            <param name="request">The natural language query request</param>
            <returns>Complete query response</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.IDatabaseService.GetAllDatabasesAsync">
            <summary>
            Asynchronously retrieves all databases.
            </summary>
            <returns>A task that represents the asynchronous operation. The task result contains an enumerable collection of Database objects.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.IDatabaseService.AddDatabaseAsync(DynamicDashboardCommon.Models.Database)">
            <summary>
            Asynchronously adds a new database.
            </summary>
            <param name="database">The database object to add.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the ID of the newly added database.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.IDatabaseService.GetDatabaseByIdAsync(System.Int32)">
            <summary>
            Asynchronously retrieves metadata for a specific database.
            </summary>
            <param name="databaseId">The ID of the database to retrieve metadata for.</param>
            <returns>A boolean indicating whether the metadata retrieval was successful.</returns>
        </member>
        <member name="T:DynamicDasboardWebAPI.Services.ILogsService">
            <summary>
            Provides methods for logging exceptions.
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.ILogsService.LogExceptionAsync(System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Logs an exception asynchronously.
            </summary>
            <param name="userId">The ID of the user who encountered the exception. Can be null.</param>
            <param name="eventType">The type of event that occurred.</param>
            <param name="eventDescription">A description of the event.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.IUserService.GetAllUsersAsync">
            <summary>
            Retrieves all users asynchronously.
            </summary>
            <returns>A task that represents the asynchronous operation. The task result contains a collection of users.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.IUserService.AddUserAsync(DynamicDashboardCommon.Models.User)">
            <summary>
            Adds a new user asynchronously.
            </summary>
            <param name="user">The user to add.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the ID of the added user.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.IUserService.GetUserByIDAsync(System.Int32)">
            <summary>
            Retrieves a user by their ID asynchronously.
            </summary>
            <param name="userId">The ID of the user to retrieve.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the user with the specified ID.</returns>
        </member>
        <member name="T:DynamicDasboardWebAPI.Services.LLM.ClaudeLLMService">
            <summary>
            Implementation of ILlmService using Anthropic's Claude API
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.LLM.ClaudeLLMService.GenerateExplanationAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.LLM.ClaudeLLMService.GenerateSqlAsync(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.LLM.ClaudeLLMService.GenerateResultExplanationAsync(System.String,System.String,System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <inheritdoc/>
        </member>
        <member name="T:DynamicDasboardWebAPI.Services.LLM.DeepSeekLLMService">
            <summary>
            Implementation of ILlmService using DeepSeek API
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.LLM.DeepSeekLLMService.GenerateExplanationAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.LLM.DeepSeekLLMService.GenerateSqlAsync(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.LLM.DeepSeekLLMService.GenerateResultExplanationAsync(System.String,System.String,System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <inheritdoc/>
        </member>
        <member name="T:DynamicDasboardWebAPI.Services.LLM.ILLMService">
            <summary>
            Interface for Language Model services that support natural language processing capabilities.
            This abstraction allows switching between different LLM providers (DeepSeek, Claude, etc.)
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.LLM.ILLMService.GenerateExplanationAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Analyzes a natural language question and generates an explanation of its understanding.
            </summary>
            <param name="question">The natural language question</param>
            <param name="databaseSchema">The database schema with tables, columns, and relationships</param>
            <param name="adminDescriptions">Optional dictionary of admin descriptions for database entities</param>
            <returns>An explanation response including understanding explanation and identified ambiguities</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.LLM.ILLMService.GenerateSqlAsync(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Generates SQL from a natural language question after confirmation of understanding.
            </summary>
            <param name="question">The original natural language question</param>
            <param name="confirmedUnderstanding">The confirmed explanation of the question's meaning</param>
            <param name="databaseSchema">The database schema with tables, columns, and relationships</param>
            <param name="resolvedAmbiguities">Dictionary of ambiguities and their resolutions</param>
            <returns>A generated SQL query</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.LLM.ILLMService.GenerateResultExplanationAsync(System.String,System.String,System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Generates an explanation for SQL query results.
            </summary>
            <param name="question">The original natural language question</param>
            <param name="sql">The SQL query that was executed</param>
            <param name="results">The query results</param>
            <returns>A user-friendly explanation of the results</returns>
        </member>
        <member name="T:DynamicDasboardWebAPI.Services.LLM.LLMServiceFactory">
            <summary>
            Factory for creating LLM service instances based on configuration
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.LLM.LLMServiceFactory.CreateLlmService">
            <summary>
            Creates an LLM service based on the configuration
            </summary>
            <returns>An implementation of ILlmService</returns>
        </member>
        <member name="T:DynamicDasboardWebAPI.Services.LogsService">
            <summary>
            Service layer for logging events.
            This class provides methods to log exceptions and other events into the database.
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.LogsService.#ctor(DynamicDasboardWebAPI.Repositories.LogsRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicDasboardWebAPI.Services.LogsService"/> class.
            </summary>
            <param name="repository">Instance of the logs repository.</param>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.LogsService.LogExceptionAsync(System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Logs an exception into the database.
            </summary>
            <param name="userId">The ID of the user (nullable).</param>
            <param name="eventType">The type of the event.</param>
            <param name="eventDescription">The description of the event.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.NlQueryService.DetermineDataViewingType(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)">
            <summary>
            Determines the most appropriate viewing type for the query results
            </summary>
            <param name="results">The query results</param>
            <param name="query">The original SQL query</param>
            <returns>Recommended viewing type ID and name</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.NlQueryService.IsAggregateQuery(System.String)">
            <summary>
            Checks if the query is an aggregate query
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.NlQueryService.FormatNumber(System.Object)">
            <summary>
            Formats numbers with appropriate culture and precision
            </summary>
        </member>
        <member name="T:DynamicDasboardWebAPI.Services.QueryGeneratorService">
            <summary>
            Service to generate SQL queries based on provided schema and questions, and process Excel files to insert generated queries.
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.QueryGeneratorService.#ctor(Microsoft.Extensions.Configuration.IConfiguration,System.Net.Http.HttpClient)">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicDasboardWebAPI.Services.QueryGeneratorService"/> class.
            </summary>
            <param name="config">The configuration settings.</param>
            <param name="httpClient">The HTTP client for making API requests.</param>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.QueryGeneratorService.ProcessExcelFile(System.IO.Stream)">
            <summary>
            Processes an Excel file to generate SQL queries based on the schema and questions provided in the file.
            </summary>
            <param name="fileStream">The stream of the Excel file to process.</param>
            <returns>A byte array representing the modified Excel file.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.QueryGeneratorService.GenerateQuery(System.String,System.String)">
            <summary>
            Generates a SQL query based on the provided schema and question.
            </summary>
            <param name="schema">The database schema.</param>
            <param name="question">The question to generate the query for.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> containing the generated query or error message.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.QueryGeneratorService.IsSchemaValid(System.String)">
            <summary>
            Validates the provided schema.
            </summary>
            <param name="schema">The database schema to validate.</param>
            <returns><c>true</c> if the schema is valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:DynamicDasboardWebAPI.Services.QueryGeneratorService.DeepSeekResponse">
            <summary>
            Represents the response from the DeepSeek API.
            </summary>
        </member>
        <member name="T:DynamicDasboardWebAPI.Services.QueryGeneratorService.Choice">
            <summary>
            Represents a choice in the DeepSeek API response.
            </summary>
        </member>
        <member name="T:DynamicDasboardWebAPI.Services.QueryGeneratorService.Message">
            <summary>
            Represents a message in the DeepSeek API response.
            </summary>
        </member>
        <member name="T:DynamicDasboardWebAPI.Services.RelationshipService">
            <summary>  
            Service class for managing relationships between tables.  
            Provides methods to get, add, update, and delete relationships.  
            </summary>  
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.RelationshipService.#ctor(DynamicDasboardWebAPI.Repositories.RelationshipRepository)">
            <summary>  
            Initializes a new instance of the <see cref="T:DynamicDasboardWebAPI.Services.RelationshipService"/> class.  
            </summary>  
            <param name="repository">The repository to interact with the data source.</param>  
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.RelationshipService.GetRelationshipsByTableIdAsync(System.Int32)">
            <summary>  
            Gets the relationships for a specific table by its ID.  
            </summary>  
            <param name="tableId">The ID of the table.</param>  
            <returns>A collection of relationships associated with the specified table.</returns>  
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.RelationshipService.AddRelationshipAsync(DynamicDashboardCommon.Models.Relationship)">
            <summary>  
            Adds a new relationship.  
            </summary>  
            <param name="relationship">The relationship to add.</param>  
            <returns>The ID of the newly added relationship.</returns>  
            <exception cref="T:System.ArgumentException">Thrown when the table IDs are not valid.</exception>  
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.RelationshipService.UpdateRelationshipAsync(DynamicDashboardCommon.Models.Relationship)">
            <summary>  
            Updates an existing relationship.  
            </summary>  
            <param name="relationship">The relationship to update.</param>  
            <returns>The number of affected rows.</returns>  
            <exception cref="T:System.ArgumentException">Thrown when the table IDs are not valid.</exception>  
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.RelationshipService.DeleteRelationshipAsync(System.Int32)">
            <summary>  
            Deletes a relationship by its ID.  
            </summary>  
            <param name="relationshipId">The ID of the relationship to delete.</param>  
            <returns>The number of affected rows.</returns>  
        </member>
        <member name="T:DynamicDasboardWebAPI.Services.TableService">
            <summary>
            Service class for managing table-related operations.
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.TableService.#ctor(DynamicDasboardWebAPI.Repositories.TableRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicDasboardWebAPI.Services.TableService"/> class.
            </summary>
            <param name="repository">The repository instance for table operations.</param>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.TableService.GetTablesByDatabaseIdAsync(System.Int32)">
            <summary>
            Retrieves tables for a specific database.
            </summary>
            <param name="databaseId">The ID of the database.</param>
            <returns>A collection of tables.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.TableService.AddTableAsync(DynamicDashboardCommon.Models.Table)">
            <summary>
            Adds a new table.
            </summary>
            <param name="table">The table to add.</param>
            <returns>The ID of the newly added table.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the table name is null or whitespace.</exception>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.TableService.UpdateTableAsync(DynamicDashboardCommon.Models.Table)">
            <summary>
            Updates an existing table.
            </summary>
            <param name="table">The table to update.</param>
            <returns>The number of affected rows.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the table name is null or whitespace.</exception>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.TableService.DeleteTableAsync(System.Int32)">
            <summary>
            Deletes a table.
            </summary>
            <param name="tableId">The ID of the table to delete.</param>
            <returns>The number of affected rows.</returns>
        </member>
        <member name="T:DynamicDasboardWebAPI.Services.UserService">
            <summary>
            Service class for managing user-related operations.
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.UserService.#ctor(DynamicDasboardWebAPI.Repositories.UserRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicDasboardWebAPI.Services.UserService"/> class.
            </summary>
            <param name="repository">The user repository instance.</param>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.UserService.GetAllUsersAsync">
            <summary>
            Retrieves all users asynchronously.
            </summary>
            <returns>A task that represents the asynchronous operation. The task result contains a collection of users.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.UserService.AddUserAsync(DynamicDashboardCommon.Models.User)">
            <summary>
            Adds a new user asynchronously.
            </summary>
            <param name="user">The user to add.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the ID of the added user.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the username is null or empty.</exception>
        </member>
        <member name="M:DynamicDasboardWebAPI.Services.UserService.GetUserByIDAsync(System.Int32)">
            <summary>
            Retrieves a user by their ID asynchronously.
            </summary>
            <param name="userId">The ID of the user to retrieve.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the user with the specified ID.</returns>
        </member>
        <member name="T:DynamicDasboardWebAPI.Utilities.CustomExceptionMiddleware">
            <summary>
            Middleware to handle exceptions globally and log them using ILogsService.
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Utilities.CustomExceptionMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:DynamicDasboardWebAPI.Utilities.CustomExceptionMiddleware"/> class.
            </summary>
            <param name="next">The next middleware in the pipeline.</param>
        </member>
        <member name="M:DynamicDasboardWebAPI.Utilities.CustomExceptionMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Invokes the middleware to handle exceptions.
            </summary>
            <param name="context">The HTTP context.</param>
            <returns>A task that represents the completion of request processing.</returns>
        </member>
        <member name="M:DynamicDasboardWebAPI.Utilities.CustomExceptionMiddleware.HandleExceptionAsync(Microsoft.AspNetCore.Http.HttpContext,System.Exception)">
            <summary>
            Handles the exception and writes a JSON response to the client.
            </summary>
            <param name="context">The HTTP context.</param>
            <param name="exception">The exception that occurred.</param>
            <returns>A task that represents the completion of response writing.</returns>
        </member>
        <member name="T:DynamicDasboardWebAPI.Utilities.DatabaseHelper">
            <summary>
            Helper class for standardized database operations using Dapper and ADO.NET
            Provides extension methods for IDbConnection and other database utilities
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Utilities.DatabaseHelper.QuerySafeAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a query safely and maps the result to a list of entities
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Utilities.DatabaseHelper.ExecuteSafeAsync(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a command safely and returns the number of affected rows
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Utilities.DatabaseHelper.QueryFirstOrDefaultSafeAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a query safely and returns the first result or default value
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Utilities.DatabaseHelper.QuerySingleOrDefaultSafeAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a query safely and returns a single result
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Utilities.DatabaseHelper.ExecuteScalarSafeAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a scalar query safely and returns the result
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Utilities.DatabaseHelper.WithConnectionAsync``1(System.Data.IDbConnection,System.Func{System.Data.IDbConnection,System.Threading.Tasks.Task{``0}})">
            <summary>
            Executes an operation with proper connection management
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Utilities.DatabaseHelper.WithConnectionAsync(System.Data.IDbConnection,System.Func{System.Data.IDbConnection,System.Threading.Tasks.Task})">
            <summary>
            Executes an operation with proper connection management (no return value)
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Utilities.DatabaseHelper.ExecuteQueryAsDictionariesAsync(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Int32)">
            <summary>
            Executes a query and returns the results as a list of dictionaries
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Utilities.DatabaseHelper.ConvertToDictionaries(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Converts dynamic query results to a list of dictionaries
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Utilities.DatabaseHelper.ExecuteInTransactionAsync``1(System.Data.IDbConnection,System.Func{System.Data.IDbTransaction,System.Threading.Tasks.Task{``0}})">
            <summary>
            Executes multiple operations within a transaction
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Utilities.DatabaseHelper.ExecuteInTransactionAsync(System.Data.IDbConnection,System.Func{System.Data.IDbTransaction,System.Threading.Tasks.Task})">
            <summary>
            Executes multiple operations within a transaction with no return value
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Utilities.DatabaseHelper.GetDatabaseIdByNameAsync(System.Data.IDbConnection,System.String)">
            <summary>
            Gets a database ID by its name from the application database
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Utilities.DatabaseHelper.DatabaseExistsAsync(System.Data.IDbConnection,System.Int32)">
            <summary>
            Checks if a database exists by its ID
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Utilities.DatabaseHelper.GetDatabaseByIdAsync(System.Data.IDbConnection,System.Int32)">
            <summary>
            Gets a database by its ID from the application database
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Utilities.DatabaseHelper.GetAllDatabasesAsync(System.Data.IDbConnection)">
            <summary>
            Gets all databases with their type names from the application database
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Utilities.DatabaseHelper.GetDatabaseByNameAsync(System.Data.IDbConnection,System.String)">
            <summary>
            Gets a database by its name from the application database
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Utilities.DatabaseHelper.GetTablesByDatabaseIdAsync(System.Data.IDbConnection,System.Int32)">
            <summary>
            Gets tables for a database by ID
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Utilities.DatabaseHelper.GetColumnsByTableIdAsync(System.Data.IDbConnection,System.Int32)">
            <summary>
            Gets columns for a table by ID
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Utilities.DatabaseHelper.GetRelationshipsByTableIdAsync(System.Data.IDbConnection,System.Int32)">
            <summary>
            Gets relationships for a table by ID
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Utilities.DatabaseHelper.GetColumnsForTablesAsync(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets all columns for multiple tables in a single query
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Utilities.DatabaseHelper.GetRelationshipsForTablesAsync(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets all relationships for multiple tables in a single query
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Utilities.DatabaseHelper.GetCompleteDatabaseMetadataAsync(System.Data.IDbConnection,System.Int32,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Gets complete database metadata in a minimal number of database calls
            </summary>
            <summary>
            Gets complete database metadata in a minimal number of database calls
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Utilities.DatabaseHelper.BulkInsertAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Data.IDbTransaction,System.Int32)">
            <summary>
            Bulk inserts data into a table
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Utilities.DatabaseHelper.GetDatabaseSchemaAsync(System.Data.IDbConnection)">
            <summary>
            Gets database schema information that works across different database types
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Utilities.DatabaseHelper.UpdateConnectionStatusAsync(System.Data.IDbConnection,System.Int32,System.Boolean)">
            <summary>
            Updates the LastConnectionStatus and LastTransactionDate for a database
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Utilities.DatabaseHelper.SanitizeSqlIdentifier(System.String)">
            <summary>
            Sanitizes a SQL identifier to help prevent SQL injection
            </summary>
        </member>
        <member name="T:DynamicDasboardWebAPI.Utilities.QueryBuilder">
            <summary>
            The QueryBuilder class is responsible for constructing SQL queries dynamically.
            This class provides methods to build SELECT, INSERT, UPDATE, and DELETE queries
            based on the provided parameters. It helps in creating complex queries in a 
            programmatic way, ensuring that the queries are syntactically correct and 
            preventing SQL injection attacks by using parameterized queries.
            </summary>
        </member>
        <member name="M:DynamicDasboardWebAPI.Utilities.QueryBuilder.ExtractSqlQueryFromMarkdown(System.String)">
            <summary>
            Extracts the SQL query from a markdown code block
            </summary>
            <param name="input">Input string containing a SQL query with markdown code block syntax</param>
            <returns>The clean SQL query without markdown delimiters</returns>
        </member>
        <member name="M:NlQueryRepository.ExecuteQueryAsync(System.String)">
            <summary>
            Executes a SQL query and returns the results as a list of dictionaries.
            </summary>
            <param name="query">The SQL query to execute.</param>
            <returns>A list of dictionaries, where each dictionary represents a row of data.</returns>
        </member>
        <member name="M:NlQueryRepository.ExecuteQueryOnDatabaseAsync(System.String,System.Int32)">
            <summary>
            Executes a query on a specific database using its ID
            </summary>
        </member>
        <member name="M:NlQueryRepository.GetDatabaseMetadataAsync(System.Int32)">
            <summary>
            Retrieves metadata for a database including tables and columns.
            </summary>
            <returns>A dictionary containing database metadata.</returns>
        </member>
        <member name="M:DbConnectionFactory.CreateConnection(System.Int32)">
            <summary>
            Creates a database connection based on the database ID.
            </summary>
        </member>
        <member name="M:DbConnectionFactory.CreateOpenConnectionAsync(System.Int32)">
            <summary>
            Creates and opens a database connection asynchronously.
            </summary>
        </member>
        <member name="M:DbConnectionFactory.TestConnectionAsync(System.Int32)">
            <summary>
            Tests a database connection asynchronously.
            </summary>
        </member>
        <member name="M:DbConnectionFactory.TestConnectionAsync(DynamicDashboardCommon.Models.Database,System.String)">
            <summary>
            Tests a database connection using explicit connection parameters.
            </summary>
        </member>
        <member name="M:DbConnectionFactory.BuildConnectionString(DynamicDashboardCommon.Models.Database)">
            <summary>
            Builds a connection string from a Database object
            </summary>
        </member>
        <member name="M:DbConnectionFactory.ClearCache">
            <summary>
            Clears the connection string cache
            </summary>
        </member>
        <member name="M:DbConnectionFactory.GetConnectionInfo(System.Int32)">
            <summary>
            Gets connection information for a database by ID
            </summary>
            <param name="databaseId">The database ID</param>
            <returns>A tuple containing connection string and database type ID</returns>
        </member>
        <member name="M:DbConnectionFactory.ExecuteWithConnectionAsync``1(System.Int32,System.Func{System.Data.IDbConnection,System.Threading.Tasks.Task{``0}},System.Int32,System.Int32)">
            <summary>
            Executes an operation with proper connection management for a specific database
            </summary>
        </member>
        <member name="M:DbConnectionFactory.ExecuteWithConnectionAsync(System.Int32,System.Func{System.Data.IDbConnection,System.Threading.Tasks.Task},System.Int32,System.Int32)">
            <summary>
            Executes an operation with proper connection management for a specific database (void return)
            </summary>
        </member>
        <member name="M:DbConnectionFactory.ExecuteWithAppConnectionAsync``1(System.Func{System.Data.IDbConnection,System.Threading.Tasks.Task{``0}})">
            <summary>
            Executes an operation with proper connection management using the application database connection
            </summary>
        </member>
        <member name="M:DbConnectionFactory.ExecuteWithAppConnectionAsync(System.Func{System.Data.IDbConnection,System.Threading.Tasks.Task})">
            <summary>
            Executes an operation with proper connection management using the application database connection (void return)
            </summary>
        </member>
        <member name="M:DbConnectionFactory.UpdateConnectionStatusAsync(System.Int32,System.Boolean)">
            <summary>
            Updates the connection status for a database
            </summary>
        </member>
    </members>
</doc>
