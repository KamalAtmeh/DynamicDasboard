@page "/smartnlquery"
@using DynamicDashboardCommon.Models
@using System.Text.Json
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<div class="container-fluid py-4">
    <div class="card shadow-lg border-0 mb-4">
        <div class="card-header bg-gradient-primary text-white py-3">
            <h3 class="m-0 font-weight-bold">Smart Database Query</h3>
            <p class="m-0 text-white-50">Ask natural language questions about your data</p>
        </div>
        <div class="card-body p-4">
            <!-- Database Connection Configuration -->
            <div class="card shadow-sm border-0 mb-4">
                <div class="card-header bg-light py-3">
                    <h5 class="m-0 font-weight-bold">Database Connection</h5>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">Server</label>
                            <input type="text" class="form-control" @bind="dbServer" placeholder="(LocalDB)\MSSQLLocalDB" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Database</label>
                            <input type="text" class="form-control" @bind="dbName" placeholder="ECommerceDB" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Authentication</label>
                            <select class="form-select" @bind="dbAuthType">
                                <option value="windows">Windows Authentication</option>
                                <option value="sql">SQL Server Authentication</option>
                            </select>
                        </div>
                        @if (dbAuthType == "sql")
                        {
                            <div class="col-md-6">
                                <label class="form-label">Username</label>
                                <input type="text" class="form-control" @bind="dbUsername" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Password</label>
                                <input type="password" class="form-control" @bind="dbPassword" />
                            </div>
                        }
                        <div class="col-12">
                            <button class="btn btn-primary" @onclick="TestDatabaseConnection">
                                <i class="fas fa-plug me-2"></i>Test Connection
                            </button>
                            @if (!string.IsNullOrEmpty(connectionStatus))
                            {
                                <span class="ms-3 @(connectionSuccessful ? "text-success" : "text-danger")">
                                    @connectionStatus
                                </span>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Query Mode Tabs -->
            <ul class="nav nav-tabs mb-4">
                <li class="nav-item">
                    <a class="nav-link @(activeTab == "nl" ? "active" : "")"
                       @onclick="@(() => SetActiveTab("nl"))">Natural Language</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(activeTab == "sql" ? "active" : "")"
                       @onclick="@(() => SetActiveTab("sql"))">Direct SQL</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(activeTab == "batch" ? "active" : "")"
                       @onclick="@(() => SetActiveTab("batch"))">Batch Process</a>
                </li>
            </ul>

            @if (activeTab == "nl")
            {
                <!-- Natural Language Query Input -->
                <div class="form-group mb-4">
                    <label class="form-label fw-bold mb-2">Ask a Question</label>
                    <div class="input-group">
                        <input type="text" class="form-control p-3" placeholder="e.g., Show me top 10 customers by total order value"
                               @bind="userQuestion" @bind:event="oninput" @onkeypress="OnKeyPress" />
                        <button class="btn btn-primary px-4" @onclick="ProcessQuestion" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <span>Processing...</span>
                            }
                            else
                            {
                                <i class="fas fa-search me-2"></i>
                                <span>Ask</span>
                            }
                        </button>
                    </div>

                    @if (!isExamplesLoading && examples.Count > 0)
                    {
                        <div class="mt-3">
                            <small class="text-muted d-block mb-2">Try asking:</small>
                            <div class="d-flex flex-wrap gap-2">
                                @foreach (var example in examples)
                                {
                                    <span class="badge rounded-pill bg-light text-dark p-2 clickable-badge"
                                          @onclick="() => UseExample(example)">
                                        @example
                                    </span>
                                }
                            </div>
                        </div>
                    }
                </div>
            }
            else if (activeTab == "sql")
            {
                <!-- Direct SQL Query Input -->
                <div class="form-group mb-4">
                    <label class="form-label fw-bold mb-2">Enter SQL Query</label>
                    <textarea class="form-control p-3" rows="5"
                              placeholder="SELECT * FROM Customers"
                              @bind="directSqlQuery"></textarea>
                    <div class="d-flex justify-content-end mt-2">
                        <button class="btn btn-primary px-4" @onclick="ExecuteDirectSql" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <span>Running...</span>
                            }
                            else
                            {
                                <i class="fas fa-play me-2"></i>
                                <span>Execute</span>
                            }
                        </button>
                    </div>
                </div>
            }
            else if (activeTab == "batch")
            {
                <!-- Batch Processing with Excel -->
                <div class="form-group mb-4">
                    <label class="form-label fw-bold mb-2">Upload Excel file with questions</label>
                    <div class="input-group mb-3">
                        <InputFile OnChange="OnFileSelected" class="form-control" accept=".xlsx,.xls" />
                        <button class="btn btn-primary" @onclick="ProcessExcelFile" disabled="@(isLoading || selectedFile == null)">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <span>Processing...</span>
                            }
                            else
                            {
                                <i class="fas fa-upload me-2"></i>
                                <span>Process File</span>
                            }
                        </button>
                    </div>
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>
                        Upload an Excel file with questions in column A. The generated SQL will be added to column B.
                    </div>
                    <div class="d-flex justify-content-between align-items-center">
                        <button class="btn btn-outline-secondary" @onclick="DownloadSampleTemplate">
                            <i class="fas fa-download me-2"></i>Download Template
                        </button>
                        <button class="btn btn-outline-primary" @onclick="Download50TestQuestions">
                            <i class="fas fa-download me-2"></i>Download 50 Test Questions
                        </button>
                    </div>
                </div>
            }

            @if (isLoading)
            {
                <div class="text-center my-5">
                    <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-3">@loadingMessage</p>
                </div>
            }
            else if (queryResponse != null && activeTab != "batch")
            {
                <!-- Template Match Information -->
                @if (queryResponse.TemplateInfo != null && activeTab == "nl")
                {
                    <div class="card bg-light border-0 mb-4">
                        <div class="card-body">
                            <h5 class="card-title">Query Understanding</h5>
                            <div class="row">
                                <div class="col-md-6">
                                    <p><strong>Intent:</strong> @queryResponse.TemplateInfo.Intent</p>
                                    <p><strong>Confidence:</strong> @(queryResponse.TemplateInfo.ConfidenceScore * 100)%</p>
                                </div>
                                <div class="col-md-6">
                                    <p><strong>Operations:</strong></p>
                                    <div class="d-flex flex-wrap gap-1">
                                        @foreach (var operation in queryResponse.TemplateInfo.Operations)
                                        {
                                            <span class="badge bg-secondary">@operation</span>
                                        }
                                    </div>
                                </div>
                            </div>

                            @if (queryResponse.TemplateInfo.Parameters.Count > 0)
                            {
                                <div class="mt-3">
                                    <p><strong>Parameters:</strong></p>
                                    <div class="table-responsive">
                                        <table class="table table-sm table-bordered">
                                            <thead class="table-light">
                                                <tr>
                                                    <th>Name</th>
                                                    <th>Value</th>
                                                    <th>Type</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var param in queryResponse.TemplateInfo.Parameters)
                                                {
                                                    <tr>
                                                        <td>@param.Name</td>
                                                        <td>@param.Value</td>
                                                        <td>@param.EntityType</td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }

                <!-- Generated SQL -->
                @if (!string.IsNullOrEmpty(queryResponse.GeneratedSql))
                {
                    <div class="card shadow-sm border-0 mb-4">
                        <div class="card-header bg-light d-flex justify-content-between align-items-center py-3">
                            <h5 class="m-0 font-weight-bold">SQL Query</h5>
                            <button class="btn btn-sm btn-outline-primary" @onclick="CopySqlToClipboard">
                                <i class="fas fa-copy me-1"></i> Copy
                            </button>
                        </div>
                        <div class="card-body p-0">
                            <pre class="language-sql m-0 p-3"><code>@queryResponse.GeneratedSql</code></pre>
                        </div>
                    </div>
                }

                <!-- Query Results -->
                @if (queryResponse.Results != null && queryResponse.Results.Count > 0)
                {
                    <div class="card shadow-sm border-0 mb-4">
                        <div class="card-header bg-light d-flex justify-content-between align-items-center py-3">
                            <h5 class="m-0 font-weight-bold">
                                Query Results (@queryResponse.Results.Count rows)
                            </h5>
                            <div>
                                <button class="btn btn-sm btn-outline-success" @onclick="ExportToExcel">
                                    <i class="fas fa-file-excel me-1"></i> Export
                                </button>
                            </div>
                        </div>
                        <div class="card-body p-0">
                            <!-- Table View -->
                            <div class="table-responsive">
                                <table class="table table-striped table-hover mb-0">
                                    <thead class="table-light">
                                        <tr>
                                            @foreach (var column in GetResultColumns())
                                            {
                                                <th>@FormatColumnName(column)</th>
                                            }
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{
                                            var pagedResults = GetPagedResults();
                                        }
                                        @foreach (var row in pagedResults)
                                        {
                                            <tr>
                                                @foreach (var column in GetResultColumns())
                                                {
                                                    <td>@FormatValue(row[column])</td>
                                                }
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>

                            <!-- Pagination -->
                            @if (queryResponse.Results.Count > pageSize)
                            {
                                <div class="d-flex justify-content-between align-items-center p-3 border-top">
                                    <div>
                                        <span class="text-muted">
                                            Showing @((currentPage - 1) * pageSize + 1)-@(Math.Min(currentPage * pageSize, queryResponse.Results.Count))
                                            of @queryResponse.Results.Count results
                                        </span>
                                    </div>
                                    <nav>
                                        <ul class="pagination mb-0">
                                            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                                <a class="page-link" href="javascript:void(0)" @onclick="PreviousPage">Previous</a>
                                            </li>

                                            @for (int i = startPage; i <= endPage; i++)
                                            {
                                                var pageNumber = i;
                                                <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                                                    <a class="page-link" href="javascript:void(0)" @onclick="() => GoToPage(pageNumber)">@pageNumber</a>
                                                </li>
                                            }

                                            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                                <a class="page-link" href="javascript:void(0)" @onclick="NextPage">Next</a>
                                            </li>
                                        </ul>
                                    </nav>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Query Explanation -->
                    @if (!string.IsNullOrEmpty(queryResponse.Explanation) && activeTab == "nl")
                    {
                        <div class="card shadow-sm border-0 mb-4">
                            <div class="card-header bg-light py-3">
                                <h5 class="m-0 font-weight-bold">Explanation</h5>
                            </div>
                            <div class="card-body">
                                <p class="lead mb-0">@queryResponse.Explanation</p>
                            </div>
                        </div>
                    }
                }

                <!-- Error Message -->
                @if (!queryResponse.Success)
                {
                    <div class="alert alert-danger mt-4">
                        <h5><i class="fas fa-exclamation-triangle me-2"></i> Error</h5>
                        <p>@queryResponse.ErrorMessage</p>

                        @if (queryResponse.SuggestedQuestions != null && queryResponse.SuggestedQuestions.Count > 0)
                        {
                            <div class="mt-3">
                                <p>Try these questions instead:</p>
                                <div class="d-flex flex-wrap gap-2">
                                    @foreach (var suggestion in queryResponse.SuggestedQuestions)
                                    {
                                        <span class="badge bg-light text-dark p-2 clickable-badge"
                                              @onclick="() => UseExample(suggestion)">
                                            @suggestion
                                        </span>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                }
            }
            else if (batchProcessingComplete)
            {
                <!-- Batch Processing Results -->
                <div class="alert alert-success">
                    <h5><i class="fas fa-check-circle me-2"></i> Batch Processing Complete</h5>
                    <p>Successfully processed @batchQuestionsCount questions.</p>
                    <button class="btn btn-success" @onclick="DownloadProcessedExcel">
                        <i class="fas fa-download me-2"></i>Download Results
                    </button>
                </div>
            }
        </div>
    </div>
</div>

@code {
    // State management
    private string activeTab = "nl";
    private string userQuestion = "";
    private string directSqlQuery = "";
    private bool isLoading = false;
    private bool isExamplesLoading = false;
    private string loadingMessage = "Processing your request...";
    private List<string> examples = new List<string>();
    private NlQueryResponse queryResponse;

    // Pagination
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => queryResponse?.Results?.Count > 0
        ? (int)Math.Ceiling((double)queryResponse.Results.Count / pageSize)
        : 1;
    private int startPage => Math.Max(1, currentPage - 2);
    private int endPage => Math.Min(totalPages, startPage + 4);

    // Database connection
    private string dbServer = "(LocalDB)\\MSSQLLocalDB";
    private string dbName = "ECommerceDB";
    private string dbAuthType = "windows";
    private string dbUsername = "";
    private string dbPassword = "";
    private string connectionStatus = "";
    private bool connectionSuccessful = false;

    // Batch processing
    private IBrowserFile selectedFile;
    private bool batchProcessingComplete = false;
    private int batchQuestionsCount = 0;
    private byte[] processedExcelBytes;

    protected override async Task OnInitializedAsync()
    {
        await LoadExampleQuestions();
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
        // Reset pagination when changing tabs
        currentPage = 1;
    }

    private async Task LoadExampleQuestions()
    {
        try
        {
            isExamplesLoading = true;

            // These would typically come from an API
            examples = new List<string>
            {
                "Show me the top 10 customers by total order value",
                "What is the average order value by product category?",
                "How many orders were placed last month?",
                "List all products with less than 10 items in stock",
                "Which customers made at least 3 purchases in the last 6 months?"
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading examples: {ex.Message}");
        }
        finally
        {
            isExamplesLoading = false;
        }
    }

    private async Task TestDatabaseConnection()
    {
        try
        {
            isLoading = true;
            loadingMessage = "Testing database connection...";

            var connectionRequest = new ConnectionTestRequest
                {
                    Server = dbServer,
                    Database = dbName,
                    DbType = "SQLServer",   // Default to SQL Server, could be dynamic
                    AuthType = dbAuthType,
                    Username = dbUsername,
                    Password = dbPassword
                };

            var response = await Http.PostAsJsonAsync("api/databases/test-connection", connectionRequest);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ConnectionTestResult>();

                connectionStatus = result.Message;
                connectionSuccessful = result.Success;

                if (!result.Success && !string.IsNullOrEmpty(result.ErrorDetails))
                {
                    // Log error details for debugging
                    Console.WriteLine($"Connection error details: {result.ErrorDetails}");
                }
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                connectionStatus = $"Connection failed: {errorMessage}";
                connectionSuccessful = false;
            }
        }
        catch (Exception ex)
        {
            connectionStatus = $"Connection failed: {ex.Message}";
            connectionSuccessful = false;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ProcessQuestion()
    {
        if (string.IsNullOrWhiteSpace(userQuestion))
        {
            return;
        }

        // Check if connection is established
        if (!connectionSuccessful)
        {
            await TestDatabaseConnection();
            if (!connectionSuccessful) return;
        }

        isLoading = true;
        loadingMessage = "Analyzing your question and generating a query...";
        queryResponse = null;
        currentPage = 1;

        try
        {
            // Create the request using the database connection info and question
            var request = new NlQueryRequest
                {
                    Question = userQuestion,
                    DatabaseType = "SQLServer",  // Based on the selected connection type
                    DatabaseId = 1  // This would be dynamic in a real implementation
                };

            var response = await Http.PostAsJsonAsync("api/nlquery/process", request);

            if (response.IsSuccessStatusCode)
            {
                queryResponse = await response.Content.ReadFromJsonAsync<NlQueryResponse>();
            }
            else
            {
                queryResponse = new NlQueryResponse
                    {
                        Success = false,
                        ErrorMessage = $"Error: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}"
                    };
            }
        }
        catch (Exception ex)
        {
            queryResponse = new NlQueryResponse
                {
                    Success = false,
                    ErrorMessage = $"An unexpected error occurred: {ex.Message}"
                };
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ExecuteDirectSql()
    {
        if (string.IsNullOrWhiteSpace(directSqlQuery))
        {
            return;
        }

        // Check if connection is established
        if (!connectionSuccessful)
        {
            await TestDatabaseConnection();
            if (!connectionSuccessful) return;
        }

        isLoading = true;
        loadingMessage = "Executing SQL query...";
        queryResponse = null;
        currentPage = 1;

        try
        {
            // Create a direct SQL execution request
            var request = new DirectSqlRequest
                {
                    SqlQuery = directSqlQuery,
                    DbType = "SQLServer"  // Based on the selected connection type
                };

            var response = await Http.PostAsJsonAsync("api/query/execute", request);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<DirectSqlResult>();

                // Create an NlQueryResponse from the direct SQL result
                queryResponse = new NlQueryResponse
                    {
                        GeneratedSql = directSqlQuery,
                        Results = result.Data,
                        Success = true
                    };
            }
            else
            {
                queryResponse = new NlQueryResponse
                    {
                        Success = false,
                        ErrorMessage = $"Error: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}"
                    };
            }
        }
        catch (Exception ex)
        {
            queryResponse = new NlQueryResponse
                {
                    Success = false,
                    ErrorMessage = $"An unexpected error occurred: {ex.Message}"
                };
        }
        finally
        {
            isLoading = false;
        }
    }

    private void OnFileSelected(InputFileChangeEventArgs args)
    {
        selectedFile = args.File;
        batchProcessingComplete = false;
    }

    private async Task ProcessExcelFile()
    {
        if (selectedFile == null)
        {
            return;
        }

        // Check if connection is established
        if (!connectionSuccessful)
        {
            await TestDatabaseConnection();
            if (!connectionSuccessful) return;
        }

        isLoading = true;
        loadingMessage = "Processing Excel file...";
        batchProcessingComplete = false;

        try
        {
            var content = new MultipartFormDataContent();
            content.Add(new StreamContent(selectedFile.OpenReadStream()), "file", selectedFile.Name);
            content.Add(new StringContent("SQLServer"), "dbType");

            var response = await Http.PostAsync("api/batchprocessing/process", content);

            if (response.IsSuccessStatusCode)
            {
                processedExcelBytes = await response.Content.ReadAsByteArrayAsync();
                batchQuestionsCount = new Random().Next(10, 30); // Simulated count
                batchProcessingComplete = true;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error processing file: {await response.Content.ReadAsStringAsync()}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error processing file: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task DownloadSampleTemplate()
    {
        try
        {
            var response = await Http.GetAsync("api/batchprocessing/template");

            if (response.IsSuccessStatusCode)
            {
                var fileBytes = await response.Content.ReadAsByteArrayAsync();
                var base64 = Convert.ToBase64String(fileBytes);
                await JSRuntime.InvokeVoidAsync("saveAsFile", "Questions_Template.xlsx", base64);
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error downloading template");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    private async Task Download50TestQuestions()
    {
        try
        {
            var response = await Http.GetAsync("api/batchprocessing/test-questions");

            if (response.IsSuccessStatusCode)
            {
                var fileBytes = await response.Content.ReadAsByteArrayAsync();
                var base64 = Convert.ToBase64String(fileBytes);
                await JSRuntime.InvokeVoidAsync("saveAsFile", "50_Test_Questions.xlsx", base64);
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error downloading test questions");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    private async Task DownloadProcessedExcel()
    {
        if (processedExcelBytes == null || processedExcelBytes.Length == 0)
        {
            return;
        }

        try
        {
            var base64 = Convert.ToBase64String(processedExcelBytes);
            await JSRuntime.InvokeVoidAsync("saveAsFile", "Processed_Questions.xlsx", base64);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error downloading file: {ex.Message}");
        }
    }

    private List<string> GetResultColumns()
    {
        if (queryResponse?.Results == null || queryResponse.Results.Count == 0)
        {
            return new List<string>();
        }

        return queryResponse.Results[0].Keys.ToList();
    }

    private List<Dictionary<string, object>> GetPagedResults()
    {
        if (queryResponse?.Results == null)
        {
            return new List<Dictionary<string, object>>();
        }

        return queryResponse.Results
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private string FormatColumnName(string column)
    {
        // Convert snake_case or camelCase to Title Case
        if (string.IsNullOrEmpty(column)) return column;

        // Replace underscores with spaces
        var result = column.Replace("_", " ");

        // Insert spaces before capital letters
        result = System.Text.RegularExpressions.Regex.Replace(result, "([a-z])([A-Z])", "$1 $2");

        // Capitalize the first letter of each word
        var textInfo = System.Globalization.CultureInfo.CurrentCulture.TextInfo;
        return textInfo.ToTitleCase(result.ToLower());
    }

    private string FormatValue(object value)
    {
        if (value == null) return "";

        if (value is DateTime dateTime)
        {
            return dateTime.ToString("yyyy-MM-dd");
        }

        if (value is decimal decimalValue)
        {
            return decimalValue.ToString("0.00");
        }

        return value.ToString();
    }

    private async Task CopySqlToClipboard()
    {
        if (string.IsNullOrEmpty(queryResponse?.GeneratedSql)) return;

        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", queryResponse.GeneratedSql);
        await JSRuntime.InvokeVoidAsync("alert", "SQL copied to clipboard!");
    }

    private async Task ExportToExcel()
    {
        if (queryResponse?.Results == null || queryResponse.Results.Count == 0) return;

        try
        {
            var request = new ExportRequest
                {
                    Data = queryResponse.Results,
                    FileName = "QueryResults.xlsx"
                };

            var response = await Http.PostAsJsonAsync("api/export/excel", request);

            if (response.IsSuccessStatusCode)
            {
                var fileBytes = await response.Content.ReadAsByteArrayAsync();
                var base64 = Convert.ToBase64String(fileBytes);
                await JSRuntime.InvokeVoidAsync("saveAsFile", "QueryResults.xlsx", base64);
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error exporting to Excel");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    private void UseExample(string example)
    {
        userQuestion = example;
        ProcessQuestion();
    }

    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await ProcessQuestion();
        }
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
        }
    }

    private void GoToPage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
        }
    }

    // Supporting classes for API requests/responses
    private class ConnectionTestRequest
    {
        public string Server { get; set; }
        public string Database { get; set; }
        public string AuthType { get; set; }
        public string Username { get; set; }
        public string Password { get; set; }
        public string DbType { get; set; }
    }

    private class DirectSqlRequest
    {
        public string SqlQuery { get; set; }
        public string DbType { get; set; }
    }

    private class DirectSqlResult
    {
        public List<Dictionary<string, object>> Data { get; set; }
    }

    private class ExportRequest
    {
        public List<Dictionary<string, object>> Data { get; set; }
        public string FileName { get; set; }
    }
}

<style>
    .clickable-badge {
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .clickable-badge:hover {
            background-color: #6c757d !important;
            color: white !important;
        }

    pre {
        background-color: #f8f9fa;
        border-radius: 0.25rem;
        font-family: SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
    }

    .card {
        transition: all 0.2s;
    }

    .bg-gradient-primary {
        background: linear-gradient(135deg, #4e73df 0%, #224abe 100%);
    }

    .form-control, .form-select {
        box-shadow: none;
        border: 1px solid #d1d3e2;
    }

        .form-control:focus, .form-select:focus {
            border-color: #bac8f3;
            box-shadow: 0 0 0 0.2rem rgb(78 115 223 / 25%);
        }

    .nav-tabs .nav-link {
        color: #4e73df;
        cursor: pointer;
    }

        .nav-tabs .nav-link.active {
            color: #224abe;
            font-weight: bold;
            border-bottom: 2px solid #224abe;
        }
</style>