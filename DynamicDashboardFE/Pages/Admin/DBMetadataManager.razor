@page "/admin/dbmetadata/{DatabaseId:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using DynamicDashboardCommon.Models

<div class="container-fluid py-4">
    <div class="card shadow-lg border-0 mb-4">
        <div class="card-header bg-gradient-primary text-white py-3">
            <h3 class="m-0 font-weight-bold">Database Metadata Manager</h3>
            <p class="m-0 text-white-50">Manage table and column descriptions for improved natural language processing</p>
        </div>
        <div class="card-body p-4">
            @if (isLoading)
            {
                <div class="text-center my-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-3">Loading database schema...</p>
                </div>
            }
            else if (errorMessage != null)
            {
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    @errorMessage
                </div>
                <button class="btn btn-primary" @onclick="LoadSchema">Try Again</button>
                <button class="btn btn-secondary" @onclick="GoBack">Go Back</button>
            }
            else if (schema != null)
            {
                <div class="row mb-4">
                    <div class="col-12">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h4 class="m-0">Metadata Configuration</h4>
                                <p class="text-muted">Provide user-friendly names and descriptions for database objects</p>
                            </div>
                            <div>
                                <button class="btn btn-success" @onclick="SaveSchema">
                                    <i class="fas fa-save me-2"></i>Save All Changes
                                </button>
                                <button class="btn btn-outline-secondary ms-2" @onclick="RefreshSchema">
                                    <i class="fas fa-sync me-2"></i>Refresh Schema
                                </button>
                                <button class="btn btn-outline-secondary ms-2" @onclick="GoBack">
                                    <i class="fas fa-arrow-left me-2"></i>Back
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>
                    <strong>First-time setup:</strong> We've retrieved schema information from your database.
                    Please provide user-friendly names and descriptions to improve natural language query understanding.
                </div>

                <div class="card shadow-sm border-0 mb-4">
                    <div class="card-header bg-light d-flex justify-content-between align-items-center py-3">
                        <h5 class="m-0 font-weight-bold">Tables (@schema.Count)</h5>
                        <div>
                            <input type="text" class="form-control form-control-sm" placeholder="Search tables..."
                                   @oninput="FilterTables" />
                        </div>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>Database Table Name</th>
                                        <th>User-Friendly Name</th>
                                        <th>Description</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var table in filteredTables)
                                    {
                                        <tr>
                                            <td>@table.TableName</td>
                                            <td>
                                                <input type="text" class="form-control" placeholder="User-friendly name"
                                                       @bind="table.AdminTableName" />
                                            </td>
                                            <td>
                                                <textarea class="form-control" rows="2" placeholder="Table purpose and contents"
                                                          @bind="table.AdminDescription"></textarea>
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-info" @onclick="() => ShowColumns(table)">
                                                    <i class="fas fa-columns me-1"></i>View Columns
                                                </button>
                                            </td>
                                        </tr>
                                        @if (selectedTable == table)
                                        {
                                            <tr>
                                                <td colspan="4" class="p-0">
                                                    <div class="card m-2 shadow-sm">
                                                        <div class="card-header bg-light d-flex justify-content-between py-2">
                                                            <h6 class="m-0">Columns for @table.TableName (@table.Columns.Count)</h6>
                                                            <input type="text" class="form-control form-control-sm w-25"
                                                                   placeholder="Search columns..."
                                                                   @oninput="(e) => FilterColumns(e, table)" />
                                                        </div>
                                                        <div class="card-body p-0">
                                                            <div class="table-responsive">
                                                                <table class="table table-sm table-hover mb-0">
                                                                    <thead class="table-light">
                                                                        <tr>
                                                                            <th>Column Name</th>
                                                                            <th>User-Friendly Name</th>
                                                                            <th>Data Type</th>
                                                                            <th>Attributes</th>
                                                                            <th>Description</th>
                                                                        </tr>
                                                                    </thead>
                                                                    <tbody>
                                                                        @foreach (var column in GetFilteredColumns(table))
                                                                        {
                                                                            <tr>
                                                                                <td>@column.ColumnName</td>
                                                                                <td>
                                                                                    <input type="text" class="form-control form-control-sm"
                                                                                           placeholder="User-friendly name"
                                                                                           @bind="column.AdminColumnName" />
                                                                                </td>
                                                                                <td>
                                                                                    <span class="badge bg-secondary">@column.DataType</span>
                                                                                </td>
                                                                                <td>
                                                                                    @if (column.IsPrimary)
                                                                                    {
                                                                                        <span class="badge bg-primary me-1">Primary Key</span>
                                                                                    }
                                                                                    @if (column.IsForeignKey)
                                                                                    {
                                                                                        <span class="badge bg-info me-1">Foreign Key</span>
                                                                                    }
                                                                                    @if (!column.IsNullable)
                                                                                    {
                                                                                        <span class="badge bg-warning me-1">Required</span>
                                                                                    }
                                                                                </td>
                                                                                <td>
                                                                                    <textarea class="form-control form-control-sm" rows="1"
                                                                                              placeholder="Column purpose and meaning"
                                                                                              @bind="column.AdminDescription"></textarea>
                                                                                </td>
                                                                            </tr>
                                                                        }
                                                                    </tbody>
                                                                </table>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int DatabaseId { get; set; }

    private List<SchemaTableDto> schema;
    private List<SchemaTableDto> filteredTables;
    private SchemaTableDto selectedTable;
    private bool isLoading = true;
    private string errorMessage;
    private string tableFilter = "";
    private string columnFilter = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadSchema();
    }

    private async Task LoadSchema()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            schema = await Http.GetFromJsonAsync<List<SchemaTableDto>>($"api/databases/{DatabaseId}/schema");
            filteredTables = schema;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading database schema: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshSchema()
    {
        await LoadSchema();
        selectedTable = null;
    }

    private async Task SaveSchema()
    {
        if (schema == null) return;

        isLoading = true;
        errorMessage = null;

        try
        {
            var response = await Http.PostAsJsonAsync($"api/databases/{DatabaseId}/schema", schema);

            if (response.IsSuccessStatusCode)
            {
                // Navigate back to database management
                NavigationManager.NavigateTo("/admin/dbmanagement");
            }
            else
            {
                errorMessage = $"Error saving schema: {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving schema: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowColumns(SchemaTableDto table)
    {
        if (selectedTable == table)
        {
            selectedTable = null;
        }
        else
        {
            selectedTable = table;
            columnFilter = ""; // Reset column filter when changing tables
        }
    }

    private void FilterTables(ChangeEventArgs e)
    {
        tableFilter = e.Value?.ToString() ?? "";

        if (string.IsNullOrWhiteSpace(tableFilter))
        {
            filteredTables = schema;
        }
        else
        {
            filteredTables = schema
                .Where(t => t.TableName.Contains(tableFilter, StringComparison.OrdinalIgnoreCase) ||
                           t.AdminTableName?.Contains(tableFilter, StringComparison.OrdinalIgnoreCase) == true ||
                           t.AdminDescription?.Contains(tableFilter, StringComparison.OrdinalIgnoreCase) == true)
                .ToList();
        }
    }

    private void FilterColumns(ChangeEventArgs e, SchemaTableDto table)
    {
        columnFilter = e.Value?.ToString() ?? "";
        // The filtering happens in GetFilteredColumns
    }

    private IEnumerable<SchemaColumnDto> GetFilteredColumns(SchemaTableDto table)
    {
        if (string.IsNullOrWhiteSpace(columnFilter))
        {
            return table.Columns;
        }

        return table.Columns
            .Where(c => c.ColumnName.Contains(columnFilter, StringComparison.OrdinalIgnoreCase) ||
                       c.AdminColumnName?.Contains(columnFilter, StringComparison.OrdinalIgnoreCase) == true ||
                       c.AdminDescription?.Contains(columnFilter, StringComparison.OrdinalIgnoreCase) == true ||
                       c.DataType.Contains(columnFilter, StringComparison.OrdinalIgnoreCase));
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/admin/dbmanagement");
    }
}