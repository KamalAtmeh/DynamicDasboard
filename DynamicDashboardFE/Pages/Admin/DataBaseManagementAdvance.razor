@page "/admin/database-management-advance"
@using DynamicDashboardCommon.Models
@using DynamicDashboardCommon.Enums
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<div class="container-fluid py-4">
    <!-- Page Header with Tabs -->
    <div class="card shadow-lg border-0 mb-4">
        <div class="card-header bg-gradient-primary text-white py-3">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h3 class="m-0 font-weight-bold">Database Management</h3>
                    <p class="m-0 text-white-50">Configure and manage database connections</p>
                </div>
                <div>
                    <button class="btn btn-light" @onclick="ShowAddDatabaseForm">
                        <i class="fas fa-plus me-2"></i>Add Database
                    </button>
                    <button class="btn btn-outline-light ms-2" @onclick="DiscoverDatabases">
                        <i class="fas fa-search me-2"></i>Discover Databases
                    </button>
                    <button class="btn btn-outline-light ms-2" @onclick="() => showTemplatesModal = true">
                        <i class="fas fa-clipboard-list me-2"></i>Templates
                    </button>
                </div>
            </div>
        </div>

        <!-- Navigation Tabs -->
        <div class="card-body p-0 bg-light">
            <ul class="nav nav-tabs nav-fill">
                <li class="nav-item">
                    <a class="nav-link @(activeTab == "databases" ? "active" : "")"
                       @onclick='() => SetActiveTab("databases")'>
                        <i class="fas fa-database me-2"></i>Databases
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(activeTab == "history" ? "active" : "")"
                       @onclick='() => SetActiveTab("history")'>
                        <i class="fas fa-history me-2"></i>Connection History
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(activeTab == "discovery" ? "active" : "")"
                       @onclick='() => SetActiveTab("discovery")'>
                        <i class="fas fa-search me-2"></i>Database Discovery
                    </a>
                </li>
            </ul>
        </div>
    </div>

    <!-- Alert for notifications -->
    @if (!string.IsNullOrEmpty(notificationMessage))
    {
        <div class="alert @notificationCssClass alert-dismissible fade show" role="alert">
            <i class="@notificationIcon me-2"></i> @notificationMessage
            <button type="button" class="btn-close" @onclick="ClearNotification"></button>
        </div>
    }

    <!-- Content Area based on active tab -->
    @if (activeTab == "databases")
    {
        <!-- Database Listing Tab -->
        <div class="card shadow-sm mb-4">
            <div class="card-header bg-light d-flex justify-content-between align-items-center py-3">
                <div>
                    <h5 class="m-0">Database Connections</h5>
                </div>
                <div class="d-flex">
                    <div class="input-group input-group-sm me-2" style="width: 250px;">
                        <input type="text" class="form-control" placeholder="Search databases..."
                               @bind-value="searchTerm" @bind-value:event="oninput" />
                        <button class="btn btn-outline-secondary" type="button">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                    <div class="dropdown">
                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button"
                                data-bs-toggle="dropdown">
                            <i class="fas fa-filter me-1"></i>Filter
                        </button>
                        <div class="dropdown-menu">
                            <a class="dropdown-item" @onclick='() => FilterDatabases("all")'>All</a>
                            <a class="dropdown-item" @onclick='() => FilterDatabases("active")'>Active Only</a>
                            <a class="dropdown-item" @onclick='() => FilterDatabases("inactive")'>Inactive Only</a>
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item" @onclick='() => FilterDatabases("sqlserver")'>SQL Server</a>
                            <a class="dropdown-item" @onclick='() => FilterDatabases("mysql")'>MySQL</a>
                            <a class="dropdown-item" @onclick='() => FilterDatabases("oracle")'>Oracle</a>
                        </div>
                    </div>
                    <div class="ms-2">
                        <button class="btn btn-sm btn-outline-danger" @onclick="ShowBulkOperationsModal"
                                disabled="@(selectedDatabases.Count == 0)">
                            <i class="fas fa-cog me-1"></i>Bulk Operations (@selectedDatabases.Count)
                        </button>
                    </div>
                </div>
            </div>
            <div class="card-body p-0">
                @if (databases == null)
                {
                    <div class="text-center my-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-3">Loading databases...</p>
                    </div>
                }
                else if (!databases.Any())
                {
                    <div class="text-center my-5">
                        <i class="fas fa-database fa-3x text-muted mb-3"></i>
                        <p class="lead">No database connections found</p>
                        <button class="btn btn-primary" @onclick="ShowAddDatabaseForm">
                            <i class="fas fa-plus me-2"></i>Add Database
                        </button>
                        <button class="btn btn-outline-secondary ms-2" @onclick="DiscoverDatabases">
                            <i class="fas fa-search me-2"></i>Discover Databases
                        </button>
                    </div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-hover table-striped mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th style="width: 40px;">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox"
                                                   @onchange="SelectAllDatabases" />
                                        </div>
                                    </th>
                                    <th>Name</th>
                                    <th>Type</th>
                                    <th>Server</th>
                                    <th>Status</th>
                                    <th>Last Connected</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var db in filteredDatabases)
                                {
                                    <tr>
                                        <td>
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox"
                                                       @onchange="e => ToggleDatabaseSelection(db.DatabaseID, (bool)e.Value)"
                                                       checked="@(selectedDatabases.Contains(db.DatabaseID))" />
                                            </div>
                                        </td>
                                        <td>@db.DataBaseViewingName</td>
                                        <td>
                                            <span class="badge @GetDatabaseTypeBadgeClass(db.TypeID)">
                                                @GetDatabaseTypeName(db.TypeID)
                                            </span>
                                        </td>
                                        <td>@db.ServerAddress</td>
                                        <td>
                                            @if (db.IsActive)
                                            {
                                                <span class="badge bg-success">Active</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-danger">Inactive</span>
                                            }
                                            @if (db.LastConnectionStatus.HasValue)
                                            {
                                                @if (db.LastConnectionStatus.Value)
                                                {
                                                    <span class="badge bg-success ms-1">
                                                        <i class="fas fa-check-circle"></i>
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-danger ms-1">
                                                        <i class="fas fa-exclamation-circle"></i>
                                                    </span>
                                                }
                                            }
                                        </td>
                                        <td>
                                            @(db.LastTransactionDate.HasValue
                                                ? db.LastTransactionDate.Value.ToString("g")
                                                : "Never")
                                        </td>
                                        <td>
                                            <div class="btn-group">
                                                <button class="btn btn-sm btn-info" @onclick="() => TestConnection(db)">
                                                    <i class="fas fa-plug"></i>
                                                </button>
                                                <button class="btn btn-sm btn-warning" @onclick="() => EditDatabase(db)">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="btn btn-sm btn-primary" @onclick="() => ViewMetadata(db.DatabaseID)">
                                                    <i class="fas fa-database"></i>
                                                </button>
                                                <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDeleteDatabase(db)">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    }
    else if (activeTab == "history")
    {
        <!-- Connection History Tab -->
        <div class="card shadow-sm">
            <div class="card-header bg-light">
                <h5 class="m-0">Connection History</h5>
            </div>
            <div class="card-body">
                @if (connectionHistory == null)
                {
                    <div class="text-center my-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-3">Loading connection history...</p>
                    </div>
                }
                else if (!connectionHistory.Any())
                {
                    <div class="text-center my-5">
                        <i class="fas fa-history fa-3x text-muted mb-3"></i>
                        <p class="lead">No connection history found</p>
                    </div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Database</th>
                                    <th>Status</th>
                                    <th>Timestamp</th>
                                    <th>Duration</th>
                                    <th>Error Message</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var history in connectionHistory)
                                {
                                    <tr>
                                        <td>@history.DatabaseName</td>
                                        <td>
                                            @if (history.Success)
                                            {
                                                <span class="badge bg-success">Success</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-danger">Failed</span>
                                            }
                                        </td>
                                        <td>@history.Timestamp.ToString("g")</td>
                                        <td>@history.Duration ms</td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(history.ErrorMessage))
                                            {
                                                <button class="btn btn-sm btn-outline-danger"
                                                        @onclick="() => ShowErrorDetails(history)">
                                                    View Error
                                                </button>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    }
    else if (activeTab == "discovery")
    {
        <!-- Database Discovery Tab -->
        <div class="card shadow-sm">
            <div class="card-header bg-light">
                <h5 class="m-0">Database Discovery</h5>
            </div>
            <div class="card-body">
                <div class="row mb-4">
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header">
                                <h6 class="m-0">Server Connection</h6>
                            </div>
                            <div class="card-body">
                                <EditForm Model="discoveryParams" OnValidSubmit="StartDiscovery">
                                    <div class="mb-3">
                                        <label class="form-label">Server Type</label>
                                        <select class="form-select" @bind="discoveryParams.DbType">
                                            <option value="1">SQL Server</option>
                                            <option value="2">MySQL</option>
                                            <option value="3">Oracle</option>
                                        </select>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Server Address</label>
                                        <input type="text" class="form-control"
                                               @bind="discoveryParams.Server" placeholder="localhost" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Authentication Type</label>
                                        <select class="form-select" @bind="discoveryParams.AuthType">
                                            <option value="Windows">Windows Authentication</option>
                                            <option value="SQL">SQL Authentication</option>
                                        </select>
                                    </div>
                                    @if (discoveryParams.AuthType == "SQL")
                                    {
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label class="form-label">Username</label>
                                                <input type="text" class="form-control"
                                                       @bind="discoveryParams.Username" />
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label class="form-label">Password</label>
                                                <input type="password" class="form-control"
                                                       @bind="discoveryParams.Password" />
                                            </div>
                                        </div>
                                    }
                                    <button type="submit" class="btn btn-primary" disabled="@isDiscovering">
                                        @if (isDiscovering)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2"></span>
                                            <span>Discovering...</span>
                                        }
                                        else
                                        {
                                            <i class="fas fa-search me-2"></i>
                                            <span>Discover Databases</span>
                                        }
                                    </button>
                                </EditForm>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="card h-100">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h6 class="m-0">Discovered Databases</h6>
                                <button class="btn btn-sm btn-success"
                                        @onclick="ImportSelectedDatabases"
                                        disabled="@(!discoveredDatabases.Any(d => d.Selected))">
                                    Import Selected (@discoveredDatabases.Count(d => d.Selected))
                                </button>
                            </div>
                            <div class="card-body p-0">
                                @if (isDiscovering)
                                {
                                    <div class="text-center my-5">
                                        <div class="spinner-border text-primary" role="status">
                                            <span class="visually-hidden">Discovering databases...</span>
                                        </div>
                                        <p class="mt-3">Discovering databases on @discoveryParams.Server...</p>
                                    </div>
                                }
                                else if (!discoveredDatabases.Any())
                                {
                                    <div class="text-center my-5">
                                        <i class="fas fa-database fa-3x text-muted mb-3"></i>
                                        <p class="lead">No databases discovered yet</p>
                                        <p>Enter server details and click "Discover Databases"</p>
                                    </div>
                                }
                                else
                                {
                                    <div class="list-group list-group-flush">
                                        @foreach (var db in discoveredDatabases)
                                        {
                                            <div class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox"
                                                           @bind="db.Selected" />
                                                    <label class="form-check-label">
                                                        @db.Name
                                                    </label>
                                                </div>
                                                <span class="text-muted small">@db.Size</span>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Database Form Modal -->
    @if (showDatabaseForm)
    {
        <div class="modal fade show" tabindex="-1" style="display: block; background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            @(selectedDatabase == null ? "Add Database Connection" : "Edit Database Connection")
                        </h5>
                        <button type="button" class="btn-close" @onclick="CloseDatabaseForm"></button>
                    </div>
                    <div class="modal-body">
                        <!-- Progressive Disclosure Form with Tabs -->
                        <div class="mb-3">
                            <ul class="nav nav-tabs">
                                <li class="nav-item">
                                    <a class="nav-link @(formActiveTab == "basic" ? "active" : "")"
                                       @onclick='() => formActiveTab = "basic"'>
                                        Basic Settings
                                    </a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link @(formActiveTab == "advanced" ? "active" : "")"
                                       @onclick='() => formActiveTab = "advanced"'>
                                        Advanced Settings
                                    </a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link @(formActiveTab == "scripts" ? "active" : "")"
                                       @onclick='() => formActiveTab = "scripts"'>
                                        Scripts
                                    </a>
                                </li>
                            </ul>
                        </div>

                        <EditForm Model="@databaseForm" OnValidSubmit="SaveDatabase">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            @if (formActiveTab == "basic")
                            {
                                <!-- Basic Settings Tab -->
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label class="form-label required">Database Name</label>
                                        <InputText @bind-Value="databaseForm.DataBaseViewingName"
                                                   class="form-control" placeholder="Display Name" />
                                        <ValidationMessage For="@(() => databaseForm.DataBaseViewingName)" />
                                        <div class="form-text">User-friendly name for this connection</div>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label required">Database Type</label>
                                        <InputSelect @bind-Value="databaseForm.TypeID" class="form-select">
                                            <option value="1">SQL Server</option>
                                            <option value="2">MySQL</option>
                                            <option value="3">Oracle</option>
                                        </InputSelect>
                                        <ValidationMessage For="@(() => databaseForm.TypeID)" />
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label class="form-label required">Server Address</label>
                                        <InputText @bind-Value="databaseForm.ServerAddress"
                                                   class="form-control" placeholder="localhost" />
                                        <ValidationMessage For="@(() => databaseForm.ServerAddress)" />
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label required">Database Name</label>
                                        <InputText @bind-Value="databaseForm.DatabaseName"
                                                   class="form-control" placeholder="Database Name" />
                                        <ValidationMessage For="@(() => databaseForm.DatabaseName)" />
                                        <div class="form-text">Actual database name on the server</div>
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label class="form-label">Port</label>
                                        <InputNumber @bind-Value="databaseForm.Port"
                                                     class="form-control" placeholder="Default Port" />
                                        <div class="form-text">Leave empty for default port</div>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">Authentication Type</label>
                                        <select class="form-select" @bind="authType">
                                            <option value="Windows">Windows Authentication</option>
                                            <option value="SQL">SQL Authentication</option>
                                        </select>
                                    </div>
                                </div>
                                @if (authType == "SQL")
                                {
                                    <div class="row mb-3">
                                        <div class="col-md-6">
                                            <label class="form-label required">Username</label>
                                            <InputText @bind-Value="databaseForm.Username"
                                                       class="form-control" placeholder="Username" />
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label required">Password</label>
                                            <InputText @bind-Value="databaseForm.EncryptedCredentials"
                                                       type="password" class="form-control" placeholder="Password" />
                                        </div>
                                    </div>
                                }
                                <div class="form-check form-switch mb-3">
                                    <InputCheckbox @bind-Value="databaseForm.IsActive"
                                                   class="form-check-input" id="isActive" />
                                    <label class="form-check-label" for="isActive">Active</label>
                                </div>
                            }
                            else if (formActiveTab == "advanced")
                            {
                                <!-- Advanced Settings Tab -->
                                <div class="mb-3">
                                    <label class="form-label">Description</label>
                                    <InputTextArea @bind-Value="databaseForm.Description"
                                                   class="form-control" rows="3" placeholder="Optional description" />
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Connection String (Optional)</label>
                                    <InputText @bind-Value="databaseForm.ConnectionString"
                                               class="form-control" placeholder="Custom connection string" />
                                    <div class="form-text">
                                        Leave empty to auto-generate from the basic settings
                                    </div>
                                </div>
                                <div class="form-check form-switch mb-3">
                                    <input class="form-check-input" type="checkbox"
                                           @bind="advancedOptionsEnabled" id="enableAdvanced" />
                                    <label class="form-check-label" for="enableAdvanced">
                                        Enable Advanced Options
                                    </label>
                                </div>
                                @if (advancedOptionsEnabled)
                                {
                                    <div class="card border-warning mb-3">
                                        <div class="card-header bg-warning bg-opacity-25">
                                            <h6 class="m-0">Advanced Connection Options</h6>
                                        </div>
                                        <div class="card-body">
                                            <div class="mb-3">
                                                <label class="form-label">Connection Timeout (seconds)</label>
                                                <input type="number" class="form-control" min="5" max="300"
                                                       @bind="connectionTimeout" />
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">Connection Pool Size</label>
                                                <input type="number" class="form-control" min="1" max="100"
                                                       @bind="connectionPoolSize" />
                                            </div>
                                            <div class="form-check mb-2">
                                                <input class="form-check-input" type="checkbox"
                                                       @bind="enableMultipleResultSets" id="enableMars" />
                                                <label class="form-check-label" for="enableMars">
                                                    Enable Multiple Active Result Sets (SQL Server)
                                                </label>
                                            </div>
                                            <div class="form-check mb-2">
                                                <input class="form-check-input" type="checkbox"
                                                       @bind="enableEncryption" id="enableEncryption" />
                                                <label class="form-check-label" for="enableEncryption">
                                                    Enable Encryption
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                            else if (formActiveTab == "scripts")
                            {
                                <!-- Scripts Tab -->
                                <div class="mb-3">
                                    <label class="form-label">Database Creation Script</label>
                                    <InputTextArea @bind-Value="databaseForm.DBCreationScript"
                                                   class="form-control" rows="15" />
                                    <div class="form-text">
                                        SQL script for creating or recreating the database
                                    </div>
                                </div>
                            }

                            <!-- Validation Section -->
                            @if (validationErrors.Any())
                            {
                                <div class="alert alert-danger">
                                    <h6 class="alert-heading">Please fix the following issues:</h6>
                                    <ul class="mb-0">
                                        @foreach (var error in validationErrors)
                                        {
                                            <li>@error</li>
                                        }
                                    </ul>
                                </div>
                            }

                            <!-- Modal Footer -->
                            <div class="modal-footer">
                                <div class="me-auto">
                                    <div class="dropdown">
                                        <button class="btn btn-outline-secondary dropdown-toggle" type="button"
                                                data-bs-toggle="dropdown">
                                            Template
                                        </button>
                                        <ul class="dropdown-menu">
                                            <li><a class="dropdown-item" @onclick='() => LoadTemplate("sqlserver")'>SQL Server (Default)</a></li>
                                            <li><a class="dropdown-item" @onclick='() => LoadTemplate("mysql")'>MySQL</a></li>
                                            <li><a class="dropdown-item" @onclick='() => LoadTemplate("oracle")'>Oracle</a></li>
                                            <li><hr class="dropdown-divider"></li>
                                            <li><a class="dropdown-item" @onclick="SaveAsTemplate">Save as Template</a></li>
                                        </ul>
                                    </div>
                                </div>
                                <button type="button" class="btn btn-secondary" @onclick="CloseDatabaseForm">
                                    Cancel
                                </button>
                                <button type="button" class="btn btn-success" @onclick="TestConnectionFromForm">
                                    <i class="fas fa-plug me-1"></i> Test Connection
                                </button>
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-save me-1"></i> Save
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Confirmation Dialog -->
    @if (showConfirmDialog)
    {
        <div class="modal fade show" tabindex="-1" style="display: block; background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@confirmDialogTitle</h5>
                        <button type="button" class="btn-close" @onclick="() => showConfirmDialog = false"></button>
                    </div>
                    <div class="modal-body">
                        @confirmDialogMessage
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => showConfirmDialog = false">
                            Cancel
                        </button>
                        <button type="button" class="btn btn-@confirmDialogType" @onclick="ConfirmDialogAction">
                            @confirmDialogButtonText
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Bulk Operations Modal -->
    @if (showBulkOperationsModal)
    {
        <div class="modal fade show" tabindex="-1" style="display: block; background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Bulk Operations</h5>
                        <button type="button" class="btn-close" @onclick="() => showBulkOperationsModal = false"></button>
                    </div>
                    <div class="modal-body">
                        <p>Select an operation to perform on @selectedDatabases.Count selected databases:</p>
                        <div class="list-group">
                            <button class="list-group-item list-group-item-action d-flex justify-content-between align-items-center"
                                    @onclick="() => BulkTest()">
                                <div>
                                    <strong>Test Connections</strong>
                                    <div class="text-muted small">Test all selected database connections</div>
                                </div>
                                <i class="fas fa-plug"></i>
                            </button>
                            <button class="list-group-item list-group-item-action d-flex justify-content-between align-items-center"
                                    @onclick="() => BulkActivate(true)">
                                <div>
                                    <strong>Activate All</strong>
                                    <div class="text-muted small">Set all selected databases as active</div>
                                </div>
                                <i class="fas fa-check-circle"></i>
                            </button>
                            <button class="list-group-item list-group-item-action d-flex justify-content-between align-items-center"
                                    @onclick="() => BulkActivate(false)">
                                <div>
                                    <strong>Deactivate All</strong>
                                    <div class="text-muted small">Set all selected databases as inactive</div>
                                </div>
                                <i class="fas fa-times-circle"></i>
                            </button>
                            <button class="list-group-item list-group-item-action d-flex justify-content-between align-items-center text-danger"
                                    @onclick="() => BulkDelete()">
                                <div>
                                    <strong>Delete All</strong>
                                    <div class="text-muted small">Delete all selected databases</div>
                                </div>
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => showBulkOperationsModal = false">
                            Cancel
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Connection Templates Modal -->
    @if (showTemplatesModal)
    {
        <div class="modal fade show" tabindex="-1" style="display: block; background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Connection Templates</h5>
                        <button type="button" class="btn-close" @onclick="() => showTemplatesModal = false"></button>
                    </div>
                    <div class="modal-body">
                        <div class="row mb-3">
                            <div class="col-md-8">
                                <input type="text" class="form-control" placeholder="Search templates..."
                                       @bind="templateSearchTerm" @bind:event="oninput" />
                            </div>
                            <div class="col-md-4">
                                <button class="btn btn-primary w-100" @onclick="ShowAddTemplateForm">
                                    <i class="fas fa-plus me-2"></i>Add Template
                                </button>
                            </div>
                        </div>

                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Database Type</th>
                                        <th>Created By</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var template in connectionTemplates)
                                    {
                                        <tr>
                                            <td>@template.Name</td>
                                            <td>@GetDatabaseTypeName(template.TypeID)</td>
                                            <td>@template.CreatedBy</td>
                                            <td>
                                                <div class="btn-group">
                                                    <button class="btn btn-sm btn-primary" @onclick="() => UseTemplate(template)">
                                                        Use
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-secondary" @onclick="() => EditTemplate(template)">
                                                        Edit
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteTemplate(template)">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => showTemplatesModal = false">
                            Close
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Error Details Modal -->
    @if (showErrorDetailsModal && selectedErrorDetails != null)
    {
        <div class="modal fade show" tabindex="-1" style="display: block; background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header bg-danger text-white">
                        <h5 class="modal-title">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            Connection Error Details
                        </h5>
                        <button type="button" class="btn-close" @onclick="() => showErrorDetailsModal = false"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <h6>Database</h6>
                            <p>@selectedErrorDetails.DatabaseName</p>
                        </div>
                        <div class="mb-3">
                            <h6>Error Message</h6>
                            <div class="alert alert-danger">
                                @selectedErrorDetails.ErrorMessage
                            </div>
                        </div>
                        <div class="mb-3">
                            <h6>Timestamp</h6>
                            <p>@selectedErrorDetails.Timestamp.ToString("f")</p>
                        </div>
                        <div class="mb-3">
                            <h6>Possible Solutions</h6>
                            <ul>
                                @foreach (var solution in GetPossibleSolutions(selectedErrorDetails.ErrorMessage))
                                {
                                    <li>@solution</li>
                                }
                            </ul>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => showErrorDetailsModal = false">
                            Close
                        </button>
                        <button type="button" class="btn btn-primary" @onclick="RetryFailedConnection">
                            <i class="fas fa-sync me-2"></i>Retry Connection
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .required::after {
        content: " *";
        color: red;
    }

    .form-text {
        font-size: 0.8rem;
        color: #6c757d;
    }
</style>

@code {
    // Tab state
    private string activeTab = "databases";
    private string formActiveTab = "basic";

    // Database lists and selection
    private List<Database> databases;
    private List<Database> filteredDatabases => FilterAndSearchDatabases();
    private HashSet<int> selectedDatabases = new HashSet<int>();
    private string searchTerm = "";
    private string filterType = "all";

    // Form state
    private bool showDatabaseForm = false;
    private Database selectedDatabase = null;
    private Database databaseForm = new Database();
    private List<string> validationErrors = new List<string>();
    private string authType = "Windows";
    private bool advancedOptionsEnabled = false;
    private int connectionTimeout = 30;
    private int connectionPoolSize = 10;
    private bool enableMultipleResultSets = false;
    private bool enableEncryption = false;

    // Modal state
    private bool showConfirmDialog = false;
    private string confirmDialogTitle = "";
    private string confirmDialogMessage = "";
    private string confirmDialogType = "primary";
    private string confirmDialogButtonText = "Confirm";
    private Action confirmDialogAction;
    private bool showBulkOperationsModal = false;
    private bool showTemplatesModal = false;
    private string templateSearchTerm = "";
    private bool showErrorDetailsModal = false;

    // Notifications
    private string notificationMessage = "";
    private string notificationCssClass = "alert-info";
    private string notificationIcon = "fas fa-info-circle";

    // Database discovery
    private bool isDiscovering = false;
    private ConnectionTestRequest discoveryParams = new ConnectionTestRequest
        {
            DbType = "1",
            Server = "localhost",
            AuthType = "Windows"
        };
    private List<DiscoveredDatabase> discoveredDatabases = new List<DiscoveredDatabase>();

    // Connection history
    private List<ConnectionHistoryItem> connectionHistory;
    private ConnectionHistoryItem selectedErrorDetails;

    // Templates
    private List<ConnectionTemplate> connectionTemplates = new List<ConnectionTemplate>();

    protected override async Task OnInitializedAsync()
    {
        await LoadDatabases();
        await LoadConnectionHistory();
        await LoadConnectionTemplates();
    }

    private async Task LoadDatabases()
    {
        try
        {
            databases = await Http.GetFromJsonAsync<List<Database>>("api/databases");
        }
        catch (Exception ex)
        {
            ShowNotification($"Failed to load databases: {ex.Message}", "alert-danger", "fas fa-exclamation-triangle");
        }
    }

    private async Task LoadConnectionHistory()
    {
        try
        {
            connectionHistory = await Http.GetFromJsonAsync<List<ConnectionHistoryItem>>("api/databases/connection-history");
        }
        catch (Exception ex)
        {
            ShowNotification($"Failed to load connection history: {ex.Message}", "alert-danger", "fas fa-exclamation-triangle");
        }
    }

    private async Task LoadConnectionTemplates()
    {
        try
        {
            // In a real implementation, this would load templates from the server
            // For now, we'll use a mock list
            connectionTemplates = new List<ConnectionTemplate>
            {
                new ConnectionTemplate {
                    Id = 1,
                    Name = "SQL Server Default",
                    TypeID = 1,
                    CreatedBy = "System",
                    ServerAddress = "localhost",
                    DatabaseName = "master",
                    Username = "",
                    UseWindowsAuth = true
                },
                new ConnectionTemplate {
                    Id = 2,
                    Name = "MySQL Default",
                    TypeID = 2,
                    CreatedBy = "System",
                    ServerAddress = "localhost",
                    Port = 3306,
                    DatabaseName = "mysql",
                    Username = "root",
                    UseWindowsAuth = false
                },
                new ConnectionTemplate {
                    Id = 3,
                    Name = "Oracle Default",
                    TypeID = 3,
                    CreatedBy = "System",
                    ServerAddress = "localhost",
                    Port = 1521,
                    DatabaseName = "ORCL",
                    Username = "system",
                    UseWindowsAuth = false
                }
            };
        }
        catch (Exception ex)
        {
            ShowNotification($"Failed to load connection templates: {ex.Message}", "alert-danger", "fas fa-exclamation-triangle");
        }
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
    }

    private void ShowAddDatabaseForm()
    {
        databaseForm = new Database
            {
                IsActive = true,
                TypeID = 1,
                CreatedBy = 1,
                Port = 0
            };
        selectedDatabase = null;
        showDatabaseForm = true;
        formActiveTab = "basic";
        validationErrors.Clear();
        authType = "Windows";
        advancedOptionsEnabled = false;
    }

    private void EditDatabase(Database db)
    {
        selectedDatabase = db;
        databaseForm = new Database
            {
                DatabaseID = db.DatabaseID,
                DataBaseViewingName = db.DataBaseViewingName,
                TypeID = db.TypeID,
                ServerAddress = db.ServerAddress,
                DatabaseName = db.DatabaseName,
                Port = db.Port,
                Username = db.Username,
                EncryptedCredentials = db.EncryptedCredentials,
                Description = db.Description,
                IsActive = db.IsActive,
                CreatedBy = db.CreatedBy,
                DBCreationScript = db.DBCreationScript,
                ConnectionString = db.ConnectionString
            };

        authType = string.IsNullOrEmpty(db.Username) ? "Windows" : "SQL";
        showDatabaseForm = true;
        formActiveTab = "basic";
        validationErrors.Clear();
        advancedOptionsEnabled = false;
    }

    private async Task SaveDatabase()
    {
        // Validate the form
        validationErrors.Clear();

        if (string.IsNullOrWhiteSpace(databaseForm.DataBaseViewingName))
            validationErrors.Add("Database name is required.");

        if (string.IsNullOrWhiteSpace(databaseForm.ServerAddress))
            validationErrors.Add("Server address is required.");

        if (string.IsNullOrWhiteSpace(databaseForm.DatabaseName))
            validationErrors.Add("Database name is required.");

        if (authType == "SQL" && string.IsNullOrWhiteSpace(databaseForm.Username))
            validationErrors.Add("Username is required for SQL authentication.");

        if (authType == "SQL" && string.IsNullOrWhiteSpace(databaseForm.EncryptedCredentials))
            validationErrors.Add("Password is required for SQL authentication.");

        if (validationErrors.Any())
            return;

        try
        {
            // Update connection string if advanced options are enabled
            if (advancedOptionsEnabled && databaseForm.TypeID == 1) // SQL Server
            {
                var connStr = $"Server={databaseForm.ServerAddress};Database={databaseForm.DatabaseName};";

                if (authType == "Windows")
                    connStr += "Integrated Security=True;";
                else
                    connStr += $"User Id={databaseForm.Username};Password={databaseForm.EncryptedCredentials};";

                connStr += $"Connect Timeout={connectionTimeout};";

                if (enableMultipleResultSets)
                    connStr += "MultipleActiveResultSets=True;";

                if (enableEncryption)
                    connStr += "Encrypt=True;";

                databaseForm.ConnectionString = connStr;
            }

            if (selectedDatabase == null)
            {
                // Add new database
                await Http.PostAsJsonAsync("api/databases", databaseForm);
                ShowNotification("Database added successfully.", "alert-success", "fas fa-check-circle");
            }
            else
            {
                // Update existing database
                await Http.PutAsJsonAsync($"api/databases/{databaseForm.DatabaseID}", databaseForm);
                ShowNotification("Database updated successfully.", "alert-success", "fas fa-check-circle");
            }

            showDatabaseForm = false;
            await LoadDatabases();
        }
        catch (Exception ex)
        {
            ShowNotification($"Error saving database: {ex.Message}", "alert-danger", "fas fa-exclamation-triangle");
        }
    }

    private void ConfirmDeleteDatabase(Database db)
    {
        confirmDialogTitle = "Delete Database";
        confirmDialogMessage = $"Are you sure you want to delete the database connection '{db.DataBaseViewingName}'? This action cannot be undone.";
        confirmDialogType = "danger";
        confirmDialogButtonText = "Delete";
        confirmDialogAction = async () =>
        {
            await DeleteDatabase(db.DatabaseID);
            showConfirmDialog = false;
        };
        showConfirmDialog = true;
    }

    private async Task DeleteDatabase(int databaseId)
    {
        try
        {
            await Http.DeleteAsync($"api/databases/{databaseId}");
            ShowNotification("Database deleted successfully.", "alert-success", "fas fa-check-circle");
            await LoadDatabases();
        }
        catch (Exception ex)
        {
            ShowNotification($"Error deleting database: {ex.Message}", "alert-danger", "fas fa-exclamation-triangle");
        }
    }

    private void CloseDatabaseForm()
    {
        showDatabaseForm = false;
    }

    private async Task TestConnection(Database db = null)
    {
        Database databaseToTest = db ?? databaseForm;

        try
        {
            var response = await Http.PostAsJsonAsync("api/databases/test-connection", databaseToTest);

            if (response.IsSuccessStatusCode)
            {
                ShowNotification("Connection successful!", "alert-success", "fas fa-plug");
                // Add to connection history
                if (connectionHistory != null)
                {
                    var historyItem = new ConnectionHistoryItem
                        {
                            DatabaseID = databaseToTest.DatabaseID,
                            DatabaseName = databaseToTest.DataBaseViewingName,
                            Success = true,
                            Timestamp = DateTime.Now,
                            Duration = 150 // Mock value
                        };
                    connectionHistory.Insert(0, historyItem);
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                ShowNotification($"Connection failed: {errorContent}", "alert-danger", "fas fa-exclamation-circle");

                // Add to connection history
                if (connectionHistory != null)
                {
                    var historyItem = new ConnectionHistoryItem
                        {
                            DatabaseID = databaseToTest.DatabaseID,
                            DatabaseName = databaseToTest.DataBaseViewingName,
                            Success = false,
                            Timestamp = DateTime.Now,
                            Duration = 200, // Mock value
                            ErrorMessage = errorContent
                        };
                    connectionHistory.Insert(0, historyItem);
                }
            }
        }
        catch (Exception ex)
        {
            ShowNotification($"Error testing connection: {ex.Message}", "alert-danger", "fas fa-exclamation-triangle");
        }
    }

    private async Task TestConnectionFromForm()
    {
        await TestConnection();
    }

    private void ViewMetadata(int databaseId)
    {
        NavigationManager.NavigateTo($"/admin/metadataadvance/{databaseId}");
    }

    private string GetDatabaseTypeName(int typeId)
    {
        return typeId switch
        {
            (int)DatabaseTypeEnum.SQLServer => "SQL Server",
            (int)DatabaseTypeEnum.MySQL => "MySQL",
            (int)DatabaseTypeEnum.Oracle => "Oracle",
            _ => "Unknown"
        };
    }

    private string GetDatabaseTypeBadgeClass(int typeId)
    {
        return typeId switch
        {
            (int)DatabaseTypeEnum.SQLServer => "bg-primary",
            (int)DatabaseTypeEnum.MySQL => "bg-info",
            (int)DatabaseTypeEnum.Oracle => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private List<Database> FilterAndSearchDatabases()
    {
        if (databases == null)
            return new List<Database>();

        var result = databases.AsEnumerable();

        // Apply type filter
        if (filterType == "active")
            result = result.Where(db => db.IsActive);
        else if (filterType == "inactive")
            result = result.Where(db => !db.IsActive);
        else if (filterType == "sqlserver")
            result = result.Where(db => db.TypeID == (int)DatabaseTypeEnum.SQLServer);
        else if (filterType == "mysql")
            result = result.Where(db => db.TypeID == (int)DatabaseTypeEnum.MySQL);
        else if (filterType == "oracle")
            result = result.Where(db => db.TypeID == (int)DatabaseTypeEnum.Oracle);

        // Apply search
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var term = searchTerm.ToLowerInvariant();
            result = result.Where(db =>
                (db.DataBaseViewingName?.ToLowerInvariant().Contains(term) ?? false) ||
                (db.DatabaseName?.ToLowerInvariant().Contains(term) ?? false) ||
                (db.ServerAddress?.ToLowerInvariant().Contains(term) ?? false) ||
                (db.Description?.ToLowerInvariant().Contains(term) ?? false)
            );
        }

        return result.ToList();
    }

    private void FilterDatabases(string filter)
    {
        filterType = filter;
    }

    private void ShowNotification(string message, string cssClass, string icon)
    {
        notificationMessage = message;
        notificationCssClass = cssClass;
        notificationIcon = icon;
    }

    private void ClearNotification()
    {
        notificationMessage = "";
    }

    private void ToggleDatabaseSelection(int databaseId, bool selected)
    {
        if (selected)
            selectedDatabases.Add(databaseId);
        else
            selectedDatabases.Remove(databaseId);
    }

    private void SelectAllDatabases(ChangeEventArgs e)
    {
        var value = (bool)e.Value;

        if (value)
        {
            selectedDatabases.Clear();
            foreach (var db in filteredDatabases)
            {
                selectedDatabases.Add(db.DatabaseID);
            }
        }
        else
        {
            selectedDatabases.Clear();
        }
    }

    private void ShowBulkOperationsModal()
    {
        if (selectedDatabases.Count > 0)
            showBulkOperationsModal = true;
    }

    private async Task BulkTest()
    {
        showBulkOperationsModal = false;

        int succeeded = 0;
        int failed = 0;

        foreach (var dbId in selectedDatabases)
        {
            var db = databases.FirstOrDefault(d => d.DatabaseID == dbId);
            if (db != null)
            {
                try
                {
                    var response = await Http.PostAsJsonAsync("api/databases/test-connection", db);

                    // Add to connection history
                    if (connectionHistory != null)
                    {
                        var historyItem = new ConnectionHistoryItem
                            {
                                DatabaseID = db.DatabaseID,
                                DatabaseName = db.DataBaseViewingName,
                                Success = response.IsSuccessStatusCode,
                                Timestamp = DateTime.Now,
                                Duration = 150 // Mock value
                            };

                        if (!response.IsSuccessStatusCode)
                        {
                            historyItem.ErrorMessage = await response.Content.ReadAsStringAsync();
                            failed++;
                        }
                        else
                        {
                            succeeded++;
                        }

                        connectionHistory.Insert(0, historyItem);
                    }
                }
                catch (Exception)
                {
                    failed++;
                }
            }
        }

        ShowNotification($"Bulk test complete: {succeeded} succeeded, {failed} failed",
            succeeded > 0 && failed == 0 ? "alert-success" : "alert-warning",
            succeeded > 0 && failed == 0 ? "fas fa-check-circle" : "fas fa-exclamation-circle");
    }

    private async Task BulkActivate(bool activate)
    {
        showBulkOperationsModal = false;

        int updated = 0;

        foreach (var dbId in selectedDatabases)
        {
            var db = databases.FirstOrDefault(d => d.DatabaseID == dbId);
            if (db != null && db.IsActive != activate)
            {
                db.IsActive = activate;

                try
                {
                    await Http.PutAsJsonAsync($"api/databases/{db.DatabaseID}", db);
                    updated++;
                }
                catch (Exception)
                {
                    // Continue with next database
                }
            }
        }

        await LoadDatabases();

        ShowNotification($"{updated} databases {(activate ? "activated" : "deactivated")} successfully",
            "alert-success", "fas fa-check-circle");
    }

    private void BulkDelete()
    {
        showBulkOperationsModal = false;

        confirmDialogTitle = "Delete Multiple Databases";
        confirmDialogMessage = $"Are you sure you want to delete {selectedDatabases.Count} database connections? This action cannot be undone.";
        confirmDialogType = "danger";
        confirmDialogButtonText = "Delete All";
        confirmDialogAction = async () =>
        {
            int deleted = 0;

            foreach (var dbId in selectedDatabases.ToList())
            {
                try
                {
                    await Http.DeleteAsync($"api/databases/{dbId}");
                    deleted++;
                }
                catch (Exception)
                {
                    // Continue with next database
                }
            }

            await LoadDatabases();
            selectedDatabases.Clear();

            ShowNotification($"{deleted} databases deleted successfully", "alert-success", "fas fa-check-circle");
            showConfirmDialog = false;
        };
        showConfirmDialog = true;
    }

    private void ConfirmDialogAction()
    {
        if (confirmDialogAction != null)
            confirmDialogAction();
    }

    private async Task DiscoverDatabases()
    {
        if (activeTab != "discovery")
            activeTab = "discovery";
    }

    private async Task StartDiscovery()
    {
        isDiscovering = true;
        discoveredDatabases.Clear();

        try
        {
            // In a real implementation, this would call an API to discover databases
            // For now, we'll use mock data
            await Task.Delay(1500); // Simulate discovery time

            // Generate sample databases
            var random = new Random();
            int count = random.Next(3, 10);

            for (int i = 1; i <= count; i++)
            {
                discoveredDatabases.Add(new DiscoveredDatabase
                    {
                        Name = $"Database_{i}",
                        Size = $"{random.Next(10, 1000)} MB",
                        Selected = false
                    });
            }

            ShowNotification($"Discovery complete: found {count} databases", "alert-success", "fas fa-search");
        }
        catch (Exception ex)
        {
            ShowNotification($"Error during discovery: {ex.Message}", "alert-danger", "fas fa-exclamation-triangle");
        }
        finally
        {
            isDiscovering = false;
        }
    }

    private async Task ImportSelectedDatabases()
    {
        var selected = discoveredDatabases.Where(d => d.Selected).ToList();

        if (!selected.Any())
            return;

        int imported = 0;

        foreach (var db in selected)
        {
            try
            {
                var newDb = new Database
                    {
                        DataBaseViewingName = db.Name,
                        TypeID = int.Parse(discoveryParams.DbType),
                        ServerAddress = discoveryParams.Server,
                        DatabaseName = db.Name,
                        Username = discoveryParams.Username,
                        EncryptedCredentials = discoveryParams.Password,
                        IsActive = true,
                        CreatedBy = 1 // Current user ID
                    };

                await Http.PostAsJsonAsync("api/databases", newDb);
                imported++;
            }
            catch (Exception)
            {
                // Continue with next database
            }
        }

        await LoadDatabases();
        activeTab = "databases";

        ShowNotification($"{imported} databases imported successfully", "alert-success", "fas fa-check-circle");
    }

    private void ShowErrorDetails(ConnectionHistoryItem historyItem)
    {
        selectedErrorDetails = historyItem;
        showErrorDetailsModal = true;
    }

    private List<string> GetPossibleSolutions(string errorMessage)
    {
        var solutions = new List<string>();

        if (string.IsNullOrEmpty(errorMessage))
            return solutions;

        var lowerError = errorMessage.ToLowerInvariant();

        if (lowerError.Contains("timeout"))
        {
            solutions.Add("Check if the server is running and accessible");
            solutions.Add("Verify network connectivity");
            solutions.Add("Increase the connection timeout setting");
        }
        else if (lowerError.Contains("login") || lowerError.Contains("password") || lowerError.Contains("authentication"))
        {
            solutions.Add("Verify the username and password");
            solutions.Add("Check if the account is locked or disabled");
            solutions.Add("Ensure the login has permissions to access the database");
        }
        else if (lowerError.Contains("database") && lowerError.Contains("exist"))
        {
            solutions.Add("Verify the database name is correct");
            solutions.Add("Check if the database has been created");
            solutions.Add("Ensure the login has permissions to see the database");
        }
        else if (lowerError.Contains("server") || lowerError.Contains("host"))
        {
            solutions.Add("Verify the server address is correct");
            solutions.Add("Check if the server is running");
            solutions.Add("Verify firewall settings allow the connection");
        }
        else
        {
            solutions.Add("Check the connection string parameters");
            solutions.Add("Verify server is running and accessible");
            solutions.Add("Ensure you have proper permissions");
        }

        return solutions;
    }

    private async Task RetryFailedConnection()
    {
        if (selectedErrorDetails == null)
            return;

        var db = databases.FirstOrDefault(d => d.DatabaseID == selectedErrorDetails.DatabaseID);
        if (db != null)
        {
            showErrorDetailsModal = false;
            await TestConnection(db);
        }
    }

    private void LoadTemplate(string templateType)
    {
        var template = connectionTemplates.FirstOrDefault(t =>
            t.TypeID == (templateType == "sqlserver" ? 1 :
                        templateType == "mysql" ? 2 : 3));

        if (template != null)
        {
            databaseForm.TypeID = template.TypeID;
            databaseForm.ServerAddress = template.ServerAddress;
            databaseForm.Port = template.Port;
            databaseForm.Username = template.UseWindowsAuth ? "" : template.Username;
            databaseForm.EncryptedCredentials = "";

            authType = template.UseWindowsAuth ? "Windows" : "SQL";
        }
    }

    private void SaveAsTemplate()
    {
        // In a real implementation, this would save the current form as a template
        ShowNotification("Template saved successfully", "alert-success", "fas fa-save");
    }

    private void UseTemplate(ConnectionTemplate template)
    {
        // In a real implementation, this would load the template into a new database form
        ShowNotification("Template applied", "alert-success", "fas fa-check-circle");
        showTemplatesModal = false;

        databaseForm = new Database
            {
                TypeID = template.TypeID,
                ServerAddress = template.ServerAddress,
                DatabaseName = template.DatabaseName,
                Port = template.Port,
                Username = template.UseWindowsAuth ? "" : template.Username,
                IsActive = true,
                CreatedBy = 1
            };

        authType = template.UseWindowsAuth ? "Windows" : "SQL";
        selectedDatabase = null;
        showDatabaseForm = true;
        formActiveTab = "basic";
    }

    private void EditTemplate(ConnectionTemplate template)
    {
        // In a real implementation, this would open a form to edit the template
    }

    private void DeleteTemplate(ConnectionTemplate template)
    {
        // In a real implementation, this would delete the template
    }

    private void ShowAddTemplateForm()
    {
        // In a real implementation, this would show a form to add a new template
    }

    // Helper classes for UI models not present in the existing models
    private class DiscoveredDatabase
    {
        public string Name { get; set; }
        public string Size { get; set; }
        public bool Selected { get; set; }
    }

    private class ConnectionHistoryItem
    {
        public int DatabaseID { get; set; }
        public string DatabaseName { get; set; }
        public bool Success { get; set; }
        public DateTime Timestamp { get; set; }
        public int Duration { get; set; }
        public string ErrorMessage { get; set; }
    }

    private class ConnectionTemplate
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public int TypeID { get; set; }
        public string CreatedBy { get; set; }
        public string ServerAddress { get; set; }
        public string DatabaseName { get; set; }
        public int Port { get; set; }
        public string Username { get; set; }
        public bool UseWindowsAuth { get; set; }
    }
}