@page "/QueryGenerator"
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<h3>Generate SQL Query</h3>

<!-- Loading Screen -->
@if (isLoading)
{
    <div class="loading-overlay">
        <div class="loading-screen">
            <div class="loading-spinner"></div>
            <p>Processing, please wait...</p>
        </div>
    </div>
}

<!-- File Upload Section -->
<div class="form-group">
    <label for="fileUpload">Upload Excel File:</label>
    <InputFile id="fileUpload" class="form-control" OnChange="HandleFileUpload" />
</div>

<button class="btn btn-primary" @onclick="ProcessExcelFile">Process Excel File</button>

<!-- Manual Input Section -->
<EditForm Model="@request" OnValidSubmit="GenerateQueryAsync">
    <div class="form-group">
        <label for="schema">Database Schema:</label>
        <InputTextArea id="schema" class="form-control" @bind-Value="request.Schema" rows="10" />
    </div>
    <div class="form-group">
        <label for="question">Question:</label>
        <InputText id="question" class="form-control" @bind-Value="request.Question" />
    </div>
    <button type="submit" class="btn btn-primary">Generate Query</button>
</EditForm>

@if (!string.IsNullOrEmpty(query))
{
    <div class="mt-3">
        <h4>Generated SQL Query:</h4>
        <pre>@query</pre>
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

<!-- Display Suggestions -->
@if (suggestions != null && suggestions.Any())
{
    <div class="mt-3">
        <h4>Suggested Questions:</h4>
        <ul>
            @foreach (var suggestion in suggestions)
            {
                <li>@suggestion</li>
            }
        </ul>
    </div>
}

@code {
    private QueryRequest request = new QueryRequest();
    private string query;
    private string errorMessage;
    private IBrowserFile uploadedFile;
    private bool isLoading = false; // Track loading state
    private List<string> suggestions = new List<string>(); // Track suggestions

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Inject the JavaScript function into the page
            await JSRuntime.InvokeVoidAsync("eval", @"
                window.saveAs = function(filename, byteBase64) {
                    const link = document.createElement('a');
                    link.href = `data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,${byteBase64}`;
                    link.download = filename;
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                };
            ");
        }
    }

    private void HandleFileUpload(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
    }

    private async Task ProcessExcelFile()
    {
        if (uploadedFile == null)
        {
            errorMessage = "No file uploaded.";
            return;
        }

        isLoading = true; // Show loading screen
        errorMessage = null;
        suggestions.Clear(); // Clear previous suggestions

        try
        {
            // Create a multipart form data content
            var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(uploadedFile.OpenReadStream());
            content.Add(fileContent, "file", uploadedFile.Name);

            // Send the file to the controller
            var response = await Http.PostAsync("api/querygenerator/process-excel", content);

            if (response.IsSuccessStatusCode)
            {
                var fileBytes = await response.Content.ReadAsByteArrayAsync();
                await SaveAs("Modified_Queries.xlsx", fileBytes);
            }
            else
            {
                errorMessage = "Error processing the Excel file.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception: {ex.Message}";
        }
        finally
        {
            isLoading = false; // Hide loading screen
        }
    }

    private async Task GenerateQueryAsync()
    {
        isLoading = true; // Show loading screen
        errorMessage = null;
        suggestions.Clear(); // Clear previous suggestions

        try
        {
            var response = await Http.PostAsJsonAsync("api/querygenerator/generate", request);
            var result = await response.Content.ReadFromJsonAsync<QueryResponse>();

            if (result?.Error != null)
            {
                // If the model returned an error, display it and show suggestions
                errorMessage = result.Error;
                suggestions = result.Suggestions?.ToList() ?? new List<string>();
            }
            else
            {
                // If the model returned a query, display it
                query = result?.Query;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception: {ex.Message}";
        }
        finally
        {
            isLoading = false; // Hide loading screen
        }
    }

    private async Task SaveAs(string filename, byte[] data)
    {
        var base64 = Convert.ToBase64String(data);
        await JSRuntime.InvokeVoidAsync("saveAs", filename, base64);
    }

    public class QueryRequest
    {
        public string Schema { get; set; }
        public string Question { get; set; }
    }

    public class QueryResponse
    {
        public string Query { get; set; }
        public string Error { get; set; } // Added to handle error messages
        public IEnumerable<string> Suggestions { get; set; } // Added to handle suggestions
    }
}