/*
Deployment script for DynamicDashboardDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "DynamicDashboardDB"
:setvar DefaultFilePrefix "DynamicDashboardDB"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)] COLLATE SQL_Latin1_General_CP1_CI_AS
GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[QueryLogs]...';


GO
CREATE TABLE [dbo].[QueryLogs] (
    [QueryID]      INT            IDENTITY (1, 1) NOT NULL,
    [QueryText]    NVARCHAR (MAX) NOT NULL,
    [ExecutedAt]   DATETIME       NOT NULL,
    [ExecutedBy]   INT            NULL,
    [DatabaseType] NVARCHAR (50)  NOT NULL,
    [Result]       NVARCHAR (MAX) NULL,
    PRIMARY KEY CLUSTERED ([QueryID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Logs]...';


GO
CREATE TABLE [dbo].[Logs] (
    [LogID]            INT          IDENTITY (1, 1) NOT NULL,
    [UserID]           INT          NULL,
    [EventType]        VARCHAR (50) NOT NULL,
    [EventDescription] TEXT         NOT NULL,
    [Timestamp]        DATETIME     NULL,
    PRIMARY KEY CLUSTERED ([LogID] ASC)
);


GO
PRINT N'Creating Table [dbo].[QueryMetadata]...';


GO
CREATE TABLE [dbo].[QueryMetadata] (
    [QueryMetadataID] INT NOT NULL,
    [QueryID]         INT NOT NULL,
    [MetadataID]      INT NOT NULL,
    PRIMARY KEY CLUSTERED ([QueryMetadataID] ASC)
);


GO
PRINT N'Creating Table [dbo].[UserDatabaseAccess]...';


GO
CREATE TABLE [dbo].[UserDatabaseAccess] (
    [UserDatabaseAccessID] INT NOT NULL,
    [UserID]               INT NOT NULL,
    [DatabaseID]           INT NOT NULL,
    PRIMARY KEY CLUSTERED ([UserDatabaseAccessID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Results]...';


GO
CREATE TABLE [dbo].[Results] (
    [ResultID]          INT          NOT NULL,
    [QueryID]           INT          NOT NULL,
    [ResultData]        TEXT         NULL,
    [VisualizationType] VARCHAR (50) NULL,
    [CreatedAt]         DATETIME     NULL,
    PRIMARY KEY CLUSTERED ([ResultID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Queries]...';


GO
CREATE TABLE [dbo].[Queries] (
    [QueryID]       INT          NOT NULL,
    [UserID]        INT          NOT NULL,
    [DatabaseID]    INT          NOT NULL,
    [QueryText]     TEXT         NOT NULL,
    [ExecutedSQL]   TEXT         NULL,
    [ExecutionTime] FLOAT (53)   NULL,
    [Status]        VARCHAR (50) NULL,
    [CreatedAt]     DATETIME     NULL,
    PRIMARY KEY CLUSTERED ([QueryID] ASC)
);


GO
PRINT N'Creating Index [dbo].[Queries].[idx_query_user]...';


GO
CREATE NONCLUSTERED INDEX [idx_query_user]
    ON [dbo].[Queries]([UserID] ASC);


GO
PRINT N'Creating Index [dbo].[Queries].[idx_query_database]...';


GO
CREATE NONCLUSTERED INDEX [idx_query_database]
    ON [dbo].[Queries]([DatabaseID] ASC);


GO
PRINT N'Creating Table [dbo].[Metadata]...';


GO
CREATE TABLE [dbo].[Metadata] (
    [MetadataID]       INT           NOT NULL,
    [DatabaseID]       INT           NOT NULL,
    [TableName]        VARCHAR (100) NOT NULL,
    [ColumnName]       VARCHAR (100) NOT NULL,
    [Description]      TEXT          NULL,
    [RelationshipType] VARCHAR (50)  NULL,
    [RelatedTable]     VARCHAR (100) NULL,
    [RelatedColumn]    VARCHAR (100) NULL,
    PRIMARY KEY CLUSTERED ([MetadataID] ASC)
);


GO
PRINT N'Creating Index [dbo].[Metadata].[idx_metadata_database]...';


GO
CREATE NONCLUSTERED INDEX [idx_metadata_database]
    ON [dbo].[Metadata]([DatabaseID] ASC);


GO
PRINT N'Creating Table [dbo].[Databases]...';


GO
CREATE TABLE [dbo].[Databases] (
    [DatabaseID]       INT           NOT NULL,
    [Name]             VARCHAR (100) NOT NULL,
    [TypeID]           INT           NOT NULL,
    [ConnectionString] TEXT          NOT NULL,
    [CreatedAt]        DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([DatabaseID] ASC)
);


GO
PRINT N'Creating Index [dbo].[Databases].[idx_database_type]...';


GO
CREATE NONCLUSTERED INDEX [idx_database_type]
    ON [dbo].[Databases]([TypeID] ASC);


GO
PRINT N'Creating Table [dbo].[Users]...';


GO
CREATE TABLE [dbo].[Users] (
    [UserID]           INT           NOT NULL,
    [Username]         VARCHAR (100) NOT NULL,
    [PasswordHash]     VARCHAR (255) NOT NULL,
    [RoleID]           INT           NOT NULL,
    [AllowedDatabases] TEXT          NULL,
    [CreatedAt]        DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([UserID] ASC)
);


GO
PRINT N'Creating Index [dbo].[Users].[idx_user_role]...';


GO
CREATE NONCLUSTERED INDEX [idx_user_role]
    ON [dbo].[Users]([RoleID] ASC);


GO
PRINT N'Creating Table [dbo].[DatabaseTypes]...';


GO
CREATE TABLE [dbo].[DatabaseTypes] (
    [TypeID]   INT          NOT NULL,
    [TypeName] VARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([TypeID] ASC)
);


GO
PRINT N'Creating Table [dbo].[UserRoles]...';


GO
CREATE TABLE [dbo].[UserRoles] (
    [RoleID]   INT          NOT NULL,
    [RoleName] VARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([RoleID] ASC)
);


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[QueryLogs]...';


GO
ALTER TABLE [dbo].[QueryLogs]
    ADD DEFAULT (getdate()) FOR [ExecutedAt];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Logs]...';


GO
ALTER TABLE [dbo].[Logs]
    ADD DEFAULT (getdate()) FOR [Timestamp];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Results]...';


GO
ALTER TABLE [dbo].[Results]
    ADD DEFAULT (getdate()) FOR [CreatedAt];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Queries]...';


GO
ALTER TABLE [dbo].[Queries]
    ADD DEFAULT (getdate()) FOR [CreatedAt];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Databases]...';


GO
ALTER TABLE [dbo].[Databases]
    ADD DEFAULT (getdate()) FOR [CreatedAt];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT (getdate()) FOR [CreatedAt];


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Logs]...';


GO
ALTER TABLE [dbo].[Logs]
    ADD FOREIGN KEY ([UserID]) REFERENCES [dbo].[Users] ([UserID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[QueryMetadata]...';


GO
ALTER TABLE [dbo].[QueryMetadata]
    ADD FOREIGN KEY ([MetadataID]) REFERENCES [dbo].[Metadata] ([MetadataID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[QueryMetadata]...';


GO
ALTER TABLE [dbo].[QueryMetadata]
    ADD FOREIGN KEY ([QueryID]) REFERENCES [dbo].[Queries] ([QueryID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[UserDatabaseAccess]...';


GO
ALTER TABLE [dbo].[UserDatabaseAccess]
    ADD FOREIGN KEY ([DatabaseID]) REFERENCES [dbo].[Databases] ([DatabaseID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[UserDatabaseAccess]...';


GO
ALTER TABLE [dbo].[UserDatabaseAccess]
    ADD FOREIGN KEY ([UserID]) REFERENCES [dbo].[Users] ([UserID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Results]...';


GO
ALTER TABLE [dbo].[Results]
    ADD FOREIGN KEY ([QueryID]) REFERENCES [dbo].[Queries] ([QueryID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Queries]...';


GO
ALTER TABLE [dbo].[Queries]
    ADD FOREIGN KEY ([DatabaseID]) REFERENCES [dbo].[Databases] ([DatabaseID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Queries]...';


GO
ALTER TABLE [dbo].[Queries]
    ADD FOREIGN KEY ([UserID]) REFERENCES [dbo].[Users] ([UserID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Metadata]...';


GO
ALTER TABLE [dbo].[Metadata]
    ADD FOREIGN KEY ([DatabaseID]) REFERENCES [dbo].[Databases] ([DatabaseID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Databases]...';


GO
ALTER TABLE [dbo].[Databases]
    ADD FOREIGN KEY ([TypeID]) REFERENCES [dbo].[DatabaseTypes] ([TypeID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD FOREIGN KEY ([RoleID]) REFERENCES [dbo].[UserRoles] ([RoleID]);


GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET MULTI_USER 
    WITH ROLLBACK IMMEDIATE;


GO
PRINT N'Update complete.';


GO
